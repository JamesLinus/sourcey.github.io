<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sourcey</title>
  <subtitle>Developers of code and websites for forward-thinking technology startups.</subtitle>
  <id>http://sourcey.com</id>
  <link href="http://sourcey.com"/>
  <link href="http://sourcey.com/feed.xml" rel="self"/>
  <updated>2014-07-05T00:00:00Z</updated>
  <entry>
    <title>Engineering the Mind</title>
    <link rel="alternate" href="http://sourcey.com/engineering-the-mind/"/>
    <id>http://sourcey.com/engineering-the-mind/</id>
    <published>2014-07-05T00:00:00Z</published>
    <updated>2014-08-15T12:45:04+10:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;!--
banner: /engineering-the-mind/xiao-feng-dmt-1024x680.jpg


- read about mind hacking
- storing information (improving memory)
- STRENGTHEINING MIND AND BODY TOGETHER
	- strengthening feedback loops and synapses through focused training.
--&gt;

&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#paradoxical-thinking"&gt;Paradoxical Thinking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#true-intelligence"&gt;True Intelligence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#wu-gong-masters"&gt;Wu-Gong Masters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#recognising-and-reprogramming-patterns"&gt;Recognising and Reprogramming Patterns&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#visualise"&gt;Visualise&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#accept"&gt;Accept&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#override"&gt;Override&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;The mind is a tricky mistress, but it’s our mistress, and with the proper focused training it can be taught to function and create beyond our wildest dreams.&lt;/p&gt;

&lt;p&gt;Like in most fields that push the boundaries of fringe science, our knowledge neuroscience is limited; we don’t know how the really brain functions and stores information yet, but we do know how to program it for a higher level of efficiency. Wouldn’t it be a shame if the crazy super-computer that sits in your head wasn’t able to shine because you didn’t learn the proper commands?&lt;/p&gt;

&lt;p&gt;The mind and body that understands the underlying principles of nature can apply them to great effect in learning, thinking and application. The education system hasn’t done much for us in this regard, tending to cram our minds full of facts and figures, rather than teaching it about system, technique and strategy.&lt;/p&gt;

&lt;p&gt;I’m not a psychologist or a neuroscientist, just a humble programmer and martial artist, and as such my information will not be presented in the standard academic format. However, I’ve worked hard to sharpen my skills over the years, and am now having a great time working with some of the top companies in the world - so glean from this article what you will.&lt;/p&gt;

&lt;!--
 who's spent the last 15 years developing my skills, and is now working with some of the top companies in the world.
--&gt;

&lt;!--
The mind processes information visually in the language of forms and shapes[], but the perception and meaning of this language is governed by conscious and unconscious patterns. Physicists, alchemists, philosophers and mathematicians, and more, all attempt to explain nature by reducing it into more understandable and manageable data sets. The good news is you don't need a fancy degree, just strong will and a perceptive mind.
--&gt;

&lt;h3 id="paradoxical-thinking"&gt;Paradoxical Thinking&lt;/h3&gt;

&lt;p&gt;Paradoxical thinking is an important element of learning that challenges us to look beyond the bounds of what is considered rational and therefore ‘valid’. Paradoxically, paradoxical arguments are generally considered to be ‘invalid’, but the value of the paradox lies not it it’s validity, it’s in the resulting journey of the mind that’s given rise to by &lt;!--the reconciliation of--&gt; conflicting arguments. &lt;/p&gt;

&lt;!--
- yin yang and paradoxes
	- for most ideas that are considered to be true, there are generally polar opposites that are also considered to be true. This forms the basis 'Yin Yang', the Chinese belief that states that everything in nature has an opposite, otherwise it could not exist in the first place.

Masters of their destiny will tell you that the human animal thrives under genuine adversity, with the constant guidance of the internal voice of opposition.
If the minds ability to question 
--&gt;

&lt;p&gt;Darwinism teaches us that an organism requires adversity in order to thrive or evolve into a stronger version of itself. Take a look at our own history - nothing great has ever been achieved without a significant measure of conflict and adversity. Therefore, think of the paradox is the equivalent of fighting a war in the mind. Without regular battle we all know the troops become restless and complacent, and the last thing you want is for your troops to turn to the booze and brothels - unless you so will it.&lt;/p&gt;

&lt;p&gt;While paradoxical thinking plays an important role in helping you to ask the right questions, it’s also a trap in it’s own right. The problem with “thinking”, is that the mind ends up getting caught up in an endless iteration, with no hope of a resolution until the scope changes and more data becomes available and or accessible. Since most of our actual processing happens at a subconscious level, we don’t have as much control over the process as we would like. This is why you just can’t remember the name of that gorgeous actress when you want to, and the name always pops into your head a minute later.&lt;/p&gt;

&lt;p&gt;Like many computers programs, the brain uses multiple threads and to defer long running intensive tasks. This means that once you’ve fed your brain the correct information, it’s time to take a step back and let it do what it does best. There’s no point in rushing - you’d be better off sticking 10,000v wires in your ear and hoping that it made you smarter.&lt;/p&gt;

&lt;p&gt;Avoid lazyness too. It’s hard with all this awesome technology I know, but the mind that becomes complacent forgets how to visit the extremes, and the internal voice that desires knowledge and action becomes nothing more than the whisper of self-loathing that drives self-destructive tendencies, and is eventually lost altogether. 
&lt;!-- 
	Trying to shortcut the process is as futile
	as trying to break the natural laws, but we can use stronger laws to overcome weaker laws to optimise the result. 
 which is the ability to see directly to the heart of things
--&gt;&lt;/p&gt;

&lt;p&gt;Paradoxical thinking is only a way of thinking, and a step on the path to true intelligence.&lt;/p&gt;

&lt;h3 id="true-intelligence"&gt;True Intelligence&lt;/h3&gt;

&lt;p&gt;True intelligence is the ability to see directly to the heart of things, either by way of empirical knowledge, or some unexplained primordial intuition&lt;!--[]--&gt;. Questions are often raised as to weather our knowledge is self-contained, or if we are connected to some other combined or cloud consciousness, but theyre purely speculative. For the purpose of thios article we’ll just assume that knowledge is learned, and that anything else is outside of our direct control.&lt;/p&gt;

&lt;p&gt;There are many forms of intelligence, academic, intuitive, emotional and so on, but it’s the combination of all these forms of intelligence that affords us the “insight” and “wisdom” to tackle the really big problems. Our current society and education system is geared up so that only the academic subset is of any real value, and everything else is largely superfluous. Hopefully you don’t believe that to be true.&lt;/p&gt;

&lt;p&gt;Einstein’s genius was attributed to his ability to perceive the heart of things with a childlike sincerity. While everyone else was explaining themselves in circles with complex equations, Einstein’s discoveries were so black and white that everyone hit themselves on the head asking “why the hell didn’t I think of that?”.&lt;/p&gt;

&lt;p&gt;At the heart of true inteligence is objective perception. Imagine you’re a baby taking your first steps; how vivid and present the experience must be. For children there’s no layers between what’s happening and what’s experienced. For most of us though, our psyche is so marred with unconscious patterning and coping mechanisms, that by the time we reach adulthood the ability to be truly present in the moment is a distant memory. The irony here is that when the mind reaches this stage, becoming more intelligent is actually more of an unlearning or an unravelling process.&lt;/p&gt;

&lt;p&gt;True intelligence is dependent on more that just our perception though; equally important is the ability to process information and act accordingly in the moment. While these skills come more naturally for some, they are available to all by following a path of mastery that incorporates the mind, body and spirit, and constant testing of limitations.&lt;/p&gt;

&lt;!--
So what does it mean to see to the "heat of things"? 

 far from it, it's to say that  
, which is necessary for perception
where the adult mind tends to analyse and rationalise itself around in circles. In this respect, our mind is it's own worst enemy.

Over time something changes; the mind develops comping mechanisms and patterns that filter stimulus and affect the way we process information. we become desensitised and dull.

A quality that's recognises in children (and also Einstein), is their ability to perceive the heart of the situation. 

Einstein's genius during his time was his ability to perceive the heart of things with a childlike sincerity. 
There was no layers to cloud his perception
--&gt;

&lt;!--
Most of the information in the brain is stored in the subconscious, whch is always processing, this can't happen until the conscious mind takes a break. 

, and that's something that can't happen when the mind is on endless iteration. 

Every day we are bombarded with an insane amount of stimulus, and if we were consciously aware of it all at once, the we would surely go insane! The mind conveniently develops coping mechanisms that filter and sometimes modify non-critical and overly traumatic details and experiences. While these mechanisms are necessary, the process of desensitisation can dull the mind over time.

An intelligent and active mind is defined by it's ability to see directly to the core of the matter; either by way of empirical knowledge, or some unexplained primordial intuition[]. For now we'll assume that knowledge is learned, and that anything else is outside of our direct control, therefore outside the scope of this article.


So how does one stay sane in a world full of contradictions and paradoxes?

Physicists, alchemists, philosophers and mathematicians, and more, all attempt to explain nature by reducing it into more understandable and manageable data sets. The good news is you don't need a fancy degree, just strong will and a perceptive mind.

Every day we are bombarded with an insane amount of stimulus, and if we were consciously aware of it all at once, the we would surely go insane! The mind conveniently develops coping mechanisms that filter and sometimes modify non-critical and overly traumatic details and experiences. While these mechanisms are necessary, the process of desensitisation can dull the mind over time.

An intelligent and active mind is defined by it's ability to see directly to the core of the matter; either by way of empirical knowledge, or some unexplained primordial intuition[]. For now we'll assume that knowledge is learned, and that anything else is outside of our direct control, therefore outside the scope of this article.

## Reprogramming Your Mind
The process of dumbing down can be reversed by...
by reprogramming the mind to filter out the 
 We do this by filtering 
 it part by part

 -- wu-gong?
The first thing required is will-power, the will to constantly override the internal voice of opposition which wants to enforce your learned patterns.
Will-power is developed though conflict, be it with the self, others or situational. 
The key to developing will-power, as well as most learned skills, is focus.
--&gt;

&lt;h2 id="wu-gong-masters"&gt;Wu-Gong Masters&lt;/h2&gt;

&lt;p&gt;Gong fu masters are the true masters of reality, for they have connected the mind to the the body in a way that enables them to achieve seemingly super-human feats. These feats may seem improbable and even impossible to most, and I would tend to agree had I not had the privelidge of training with some of the top masters myself.&lt;/p&gt;

&lt;p&gt;In martial arts there are two predominant philosophies; one that favours the hard (external), and one that favours the soft (internal). Internal martial arts that focus on how to maximise force with minimal effort are of particular interest to me, because they show the existence of a commonly misunderstood force that can’t be generated by muscular exertion alone. &lt;/p&gt;

&lt;p&gt;There is a “special” force that moves through the human body that can be accessed and demonstrated by a few of the top masters at will. I’m not going to call it “ki”, “qi” or anything else liable to be misinterpreted or accompanied with hallucinations of mystical warriors flying through bamboo forests, rather it’s the kind of condition that allows a mother to lift up a car to rescue her baby&lt;!--[]--&gt;, or a master to project their entire body mass through a small movement.&lt;/p&gt;

&lt;!--
Most of us have mapped our neural pathways sufficiently to be able to preform daily functions with ease, but what if your brain was mapped to accelerate and project your entire body mass through any movement? ****

and can be unexpectedly triggered under extreme conditions

, not only is he is one of the great internal gong fu masters, but he has the internal control to cycle his heart rate at will - though all ... pulses measured in Chinese medicine.

facilitates this force transference. The other precondition for 'Lim Tao' to work is
This kind of ability has nothing to do with one's academic intelligence whatsoever. 

is one of the most intelligent people I have ever met, he 

Sigong Chu has the ability to read your energy and intent before you even know what's happening yourself. I don't know about you, but for me that's way cooler than reciting PI to 100,000 places.

Those who spend a lot of time in their mind often neglect their body, but it's only through the combination of mind, body and what we subjectively call spirit, that true intelligence can be attained.These skills though,but they have a much greater potential over short term physical gains.

This is why they take so long, and require a certain type of individual to master them.
--&gt;

&lt;p&gt;Chu Shong Tin is one such master who can demonstrate these abilities. Sigong Chu is a life-long Wing Chun practitioner known as the “King of Siu Lim Tao”, and is one of Yip Man’s oldest and most highly regarded students. Sigong Chu often talks about “Lim Tao”, which is a mind-body connection that allows him to transfer “Lim Lik” or mind force while in a state of complete muscular relaxation.&lt;/p&gt;

&lt;p&gt;Sigong Chu has mastered the internal forces to the point where he can switch it on at will, and move it through his entire body. He tells a story about how he once had an MRI scan and decided to switch on his ‘Lim Lik’ to see what part of his brain was activating. The doctors told him to stop doing whatever he was doing, because it was throwing the readings out. According to Chu the cerebellum is the part of the brain that activates, which makes a lot of sense because it’s also the part of the brain that controls the synapses to the central nervous system, and a part of the brain we know very little about. &lt;/p&gt;

&lt;p&gt;It could be said that the study of internal martial arts requires a specific kind of abstract intelligence that relies on feeling and intuition. The internal arts deal with “concepts” and “ideas” that can be applied in the body to transfer and deal with force. &lt;/p&gt;

&lt;p&gt;To learn these ideas, the student must be able to feel them in their body, and train them to the point where the neural pathways pertaining to the “idea” are so well mapped out, that they can be triggered with a single thought. The challenging thing for most is to reconcile is that these ideas don’t exist predominantly in the head, they’re directly related to a movement of energy through the body. &lt;/p&gt;

&lt;p&gt;When talking with the masters you often hear them talk about “state, not shape”. What this means is that if the idea is working properly, the shape of the body, or the hand technique being applied, is irrelevant. This is interesting, because it shows us that physicality plays a secondary role in generating true force, rather it’s a state of mind that can be triggered. &lt;/p&gt;

&lt;p&gt;This is an wonderful avenue of study, but take care if you’re perusing these skills, because there are countless frauds out there, and probably a handful of people in the world who can actually demonstrate these skills properly.&lt;/p&gt;

&lt;h2 id="recognising-and-reprogramming-patterns"&gt;Recognising and Reprogramming Patterns&lt;/h2&gt;

&lt;!-- a ... processor with ... memory
	but still many of us take it for granted, 
Nature reproduces and decays in the form of patterns, and so does our own mind, albeit much more rapidly and responsively. 
Nature reproduces and decays in the form of patterns, and so does our own mind, although it is a much more localised and susceptible medium.
As nature reproduces and decays in the form of patterns, so does our own mind. 
 due to the fact that is's a much more localised and susceptible medium
 grows and decays
Nature takes shape in the form of patterns, as do the thoughts in our mind. 
Just as nature speaks a universal language of recurring geometric patterns and principles[sacred geometry], so does the human mind. 
 [sacred geometry]
Weather or not the same patterns that exist in nature influence our own thoughts is speculative, and not as more useful or relevant as the question of how to identify and reprogram these recurring patterns within our psyche.
 the origin
 of this stimulusow could we possibly take it all in? 
 shapes and 
The more patterning we take on board, the more disconnected we become from , the less free we become; 
 in the brain and body
--&gt;

&lt;p&gt;In nature, as well as the human mind, we can observe geometric patterns and principles that reoccur - we call it sacred geometry. As energy collides and interacts at the mercy of the &lt;!--variables and constants that comprise the--&gt; laws of nature, it stands to reason that there will be convergent similarities. &lt;/p&gt;

&lt;p&gt;Patterns of the mind, both conscious and unconscious, govern the way we perceive sensory input and stored memories. In essence, reality doesn’t change, but the way we see it does. &lt;/p&gt;

&lt;p&gt;Thought patterns are learned and enforced on us from from the time of our birth, by our parents, friends, work, and society as whole. Many of these patterns are so ingrained into every day life, that they are absurdly considered by everyone to be “normal”. The deeper you look into your own life and the world around you, the more the matrix of patterns that comprise perceived reality will be exposed. The practice of identifying and understanding the patterns that influence the mind is a worthy pursuit, especially when those patterns may deprive us of our full potential. &lt;/p&gt;

&lt;p&gt;The more patterns we take on board throughout life, the more disconnected we become from our source, and the less “free” we become. This metamorphosis prevents us from being able to express ourselves truly, and simply “be in the the moment”. Without patterns we would exist in a state of bliss, but the truth is that some patterns are necessary for our very survival, so it’s up to your discretion as to what you want to keep, and what you let go of. The principle of &lt;a href="http://en.wikipedia.org/wiki/Neuroplasticity"&gt;Neuroplasticity&lt;/a&gt; ensures that our mind is ever changing, and we have control over how it develops.&lt;/p&gt;

&lt;h3 id="visualise"&gt;Visualise&lt;/h3&gt;

&lt;p&gt;The first step is to visualise the pattern you want to let go of. Mental patterns are constructs of consciousness, so they can be visualised as constructs in the form of shapes and emotions by the way they intersect with, and influence the energetic space in which they exist. The more you can isolate variables and constants which formulate the pattern, the clearer and more aware of the pattern will become&lt;!--, and in turn it's affect on your entire life--&gt;.&lt;/p&gt;

&lt;p&gt;First, calm your mind and relax your body - the deeper your mediative state the better.&lt;/p&gt;

&lt;p&gt;A system is both as simple and complex as the sum of all of its parts&lt;!--[]--&gt;, so start by visualising your life and consciousness as the overall system, and your patterns as the parts which comprise the whole.&lt;/p&gt;

&lt;p&gt;When you’re aware of your pattern and can visualise and it’s constructs, then you’re ready to make your peace and finally let it go.&lt;/p&gt;

&lt;!-- 
Mental patterns can be visualised as forms and shapes by the way they intersect and influence the energetic space in which they exist. 

-- isolate variables and constants, constructs
The first step to changing subconscious patterning is to gain insight about it through experience, meditation and interaction with others. 

Start by viewing your life as whole, then use reductive thinking? (reverse engineering?) until you arrive at the source of the patterns you're not satisfied with and want to change.


for the people around us
Start with 
so to see your patterning clearly, first view your life as whole, then reverse engineer it part by part until you discover the source of any patterns that you're not satisfied with.
--&gt;

&lt;h3 id="accept"&gt;Accept&lt;/h3&gt;

&lt;!--
	can visualise, isolate, and feel
	the constants and variables that formulate it
	This is not about fighting, it's about letting go. Resistance is futile. 
Consciously enter into the process of the pattern that you want to let go of, and be totally aware of
the constants and variables that construct your pattern, and
--&gt;
&lt;p&gt;Enter into a meditative state again, and become aware consciously aware of the pattern that you want to let go of, and how it affects your mind and body. Explore all the parts of your pattern, including the journeys it has taken you on over the course of your life. Wherever this takes you just go with it, and weather you feel pain, fear, rage, or loss, just experience those feelings and allow them to be.&lt;/p&gt;

&lt;p&gt;Remember that resistance is futile; you can’t fight negativity with hatred or more negativity, this is about accepting and letting go. &lt;/p&gt;

&lt;p&gt;Before long you will feel clear again, like a weight has been lifted - but we’re not done yet! When you’ve accepted your pattern, and dealt with the associated negative feeling and emotions, you’re ready to override your original programming.&lt;/p&gt;

&lt;!--
By accepting your pattern for what it is you stop fighting and become consciously aware of it, an begin to release it's unconscious hold on you.
--&gt;

&lt;h3 id="override"&gt;Override&lt;/h3&gt;

&lt;p&gt;Overriding your original programming is as simple as doing something that’s completely contradictory to your original programming. The more you do it the better. &lt;/p&gt;

&lt;p&gt;This is about breaking patterns and limitations, so go nuts. Those that follow the rules their entire live get a life of sub achievement, and a pat on the back with the possibility of a nice retirement fund at the end. Big whoop.&lt;/p&gt;

&lt;p&gt;Remember that everything that’s considered normal today was outrageous and preposterous at one point in time. At best people will think you’re a savant, and at worst they’ll think you’re an idiot, maybe a little of both, but who really gives a shit what people think anyway!?&lt;/p&gt;

&lt;!--Not much more needs to be said - have fun, and above all, be outrageous. This is, after all, about breaking patterns and limitations!


This is as simple as doing something that's contradictory to your original programming. The more you do it the better.

To override your patterning you need to override it by acting contrary to your programming.

The mind processes and stores information visually in the form of images and shapes[], but our perception and the meaning of this stimulus is governed by our conscious and unconscious patterning. For many, the process 

Our belief system is governed by patterns, and many of them have a negative effect on the way we perceive and interact with the world around us. 

Identifying the patterns that govern the mind is a worthy pursuit, especially when it helps us resolve patterns that have a negative impact on our lives. 
These patterns 
--&gt;

&lt;!--
-- desensitisation, coping mechanisms, dumbing down 
can even reprogram itself to fill in the blanks if a memory is too traumatic.

patterns itself to filter non-critical details and experiences, and 
Every day we are bombarded with an insane amount of stimulus, which if we took it all in, would surely drive us insane!  

The mind deals with a traumatic experiences by filtering out the information it can't process, and filling in the blanks with it's own version of events.
This process of desensitisation and patterning helps us cope with reality, and helps (some of) us refrain from shouting at idiots on the street, but it's gone to far when the mind stops testing the boundaries and asking the real questions. 
--&gt;

&lt;!--
, albeit much more rapidly and responsively. 
. It's recognition algorithms 
The human animal thrives under genuine adversity, which forges new pathways and shifts the frame of reference to encompass a greater scope of consciousness.

, which forges new pathways and shifts the frame of reference to encompass a greater scope of consciousness

## Breaking the Rules

This part is about breaking the rules ...
--&gt;

&lt;!--
It's easier to tweak an operational system that it is to build one from scratch, so what are you waiting for? T
--&gt;

&lt;h2 class="no_toc" id="attribution"&gt;Attribution&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="#banner"&gt;DMT&lt;/a&gt; by &lt;a href="http://studiofeng.net"&gt;Alice Feng&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  <entry>
    <title>Understanding Psychedelics</title>
    <link rel="alternate" href="http://sourcey.com/understanding-psychedelics/"/>
    <id>http://sourcey.com/understanding-psychedelics/</id>
    <published>2014-07-01T00:00:00Z</published>
    <updated>2014-07-12T12:31:52+10:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#phenythylamines-and-tryptamines"&gt;Phenythylamines and Tryptamines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#misconceptions"&gt;Misconceptions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#lsd"&gt;LSD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#dmt"&gt;DMT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#mescaline"&gt;Mescaline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;When science fails to answer the unanswerable questions regarding life and the universe, man is compelled to venture deeper into the realms of the unknown and the unseen for the answers. &lt;/p&gt;

&lt;p&gt;The great shamanic cultures of old, whose mastery and understanding of nature is unparalleled, all have one thing in common - the use of mind-altering psychedelics. Take for example, the Amazonian jungle tribes of South America. These jungle shamans concocted a brew called Ayahuasca, which contains an ingenious mix of DMT yielding plants, and a vine which acts as a MAO inhibiter that’s essential for DMT to become psychoactive when ingested orally. How could they have known about this? I’m guessing it wasn’t trial and error. Native Americans, all the way back to the Aztecs and Toltec Indians, used Mescaline to induce sacred visions, divine the future, and as a god-powerful medicine. Even the Chinese Emperor Shen Nung, the so called “father of Chinese medicine” used cannabis as a medicine, and burned it at ceremonies and rituals some 5000 years ago (approximately 2695 BCE).&lt;/p&gt;

&lt;p&gt;In this last century our understanding of psychedelics increased dramatically, but we still haven’t really scrateched the surface. Modern society and scientific reasoning have taught us to discount and devalue anything that can’t be quantified or easily referenced, but as logic and technology take over our minds and lives, we find there’s something missing - something inside of us cries out for a deeper understanding and connection to nature.&lt;/p&gt;

&lt;p&gt;In order to tackle the the original paradox of thought, to “think that which is unthinkable”, it’s necessary to drastically change the scope and frame of reference within which our consciousness operates. This is where psycadelics have been instrumental in enabling some of the greatest minds and discoveries in history.&lt;/p&gt;

&lt;!--
	, so one can’t help but to wonder if there's a missing piece of the puzzle that can’t be explained or understood by modern science and chemistry alone. 
--&gt;

&lt;h2 id="phenythylamines-and-tryptamines"&gt;Phenythylamines and Tryptamines&lt;/h2&gt;

&lt;p&gt;Most psychedelics we know about fall into two main chemical “classes” or “families”, known as phenythylamines and tryptamines. For chemistry novices, the tryptamine family contains substances like LSD, Psylocybin (contained within magic mushrooms), and DMT, while the phenythylamine family include substances like MDMA, 2C-B, MDA, amphetamines and mescaline.&lt;/p&gt;

&lt;p&gt;For those wishing to expand their knowledge on phenythylamines and tryptamines, the works of &lt;a href="https://www.erowid.org/culture/characters/shulgin_alexander/"&gt;Alexander Shulgin&lt;/a&gt; provide unsurpassed insight.&lt;/p&gt;

&lt;p&gt;Alexander Theodore “Sasha” Shulgin (June 17, 1925 – June 2, 2014) was an American medicinal chemist, biochemist, pharmacologist, psychopharmacologist, and author. Shulgin is best known for introducing MDMA (also known as “ecstasy”) to psychologists in the late 1970s for psychopharmaceutical use, but his real legacy is discovereing, synthesising, and personally bioassaying over 230 psychoactive compounds, and evaluating them for their psychedelic and/or entactogenic potential.&lt;/p&gt;

&lt;p&gt;Sasha Shulgin and his wife, Ann — a psychedelic therapist, speaker, and author in her own right — regularly tried new compounds from Sasha’s lab. If, after considerable self-experimentation, a compound proved worthy of further analysis, they would share it with a group of close friends. The “research group” would test the new chemical and rate it for duration, psychedelic qualities, and other effects.&lt;/p&gt;

&lt;p&gt;The Shulgins published the results of their research, including the theory, sysnthesis and effects of each substance is documented in two groundbreaking volumes, PiHKAL and TiHKAL. The titles stand for Phenethylamines and Tryptamines I Have Known and Loved. As Sasha once put it, everyone has “the license to explore the nature of his own soul.”, and as testament to the couple’s goal of free public access to information the books are published online &lt;a href="http://isomerdesign.com/PiHKAL/"&gt;here&lt;/a&gt; and &lt;a href="http://isomerdesign.com/TiHKAL/_"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--
Dr Shulgan was a chemist (operating from behind the iron curtain) in the 1960’s-1980’s, who personally synthesised, administered and documented the effects of each of these substances using different methods and dosages, as well as many other derivatives?. The result of her lives work is contained in two books, Phikal (phenythylamines), and Thikal (tryptamines) which are freely available online.


The Shulgins published the results of their research in two groundbreaking volumes, PiHKAL and TiHKAL. The titles stand for Phenethylamines and Tryptamines I Have Known and Loved. For chemistry novices, the tryptamines are a chemical family including LSD, DMT, and psilocybin; phenethylamines include mescaline, MDMA, 2C-B, and MDA. Both classes contain many psychedelic compounds — Shulgin’s specialty.


 into the chemistry, synthesis and effects of hundreds substance in these families, of which he personally discovered over 200. 

Dr Shulgan was a chemist (operating from behind the iron curtain) in the 1960’s-1980’s, who personally synthesised, administered and documented the effects of each of these substances using different methods and dosages, as well as many other derivatives?. The result of her lives work is contained in two books, Phikal (phenythylamines), and Thikal (tryptamines) which are freely available online.

It’s in the abstract realms of spirit and the subconscious that exists the seed of who we are, and attracts us to one another, not the things we
Therefore, in the interests of understanding the unquantifiable, it’s necessary to put aside our social conditioning, and open our minds to all possibilities.
and rationalism take over , there’s something inside of us cries out for a deeper connection that cannot be satisfied by logic and technology alone.

that cannot be satisfied by logic and technology alone.
The motivation to expand our consciousness 
and answer the unanswerable questions regarding life and the universe compels man . 

spirituality and mysticism
and we draw further from nature
to the point where the practices of spirituality and mysticism are met with skepticism, and often shunned

Modern society and scientific reasoning has taught us to discount anything that can’t be quantified or easily referenced, to the point where the practices of spirituality and mysticism are met with skepticism, and often shunned. This is hardly surprising due to our restrictive legal system, and the ridiculous amount of misinformation that’s propagated over the internet and beyond, but as we draw further from nature, there’s something inside of us cries out for a deeper connection that cannot be satisfied by logic and technology alone. Therefore, in the interests of understanding the unquantifiable, it’s necessary to put aside our social conditioning, and open our minds to all possibilities.

The desire to expand our consciousness and  has ever compelled man to venture deeper into the realms of the unknown and unseen. 
As a result she discovered over 50? new psycadellic substances
, and as well many of their more interesting derivatives
A famous chemist names Dr Shulgin, was solely responsible for the synthesis, discovery and self testing of over 50 different trypes of substances within these two families in the 60s. Dr Shulgin experimented with over 50 types of derivatives, and self administered them in order to create her life work, Thikal, which documents each substance , the synthesis method, and the effects of the substances when administered using different methods and dosages.
--&gt;

&lt;h2 id="misconceptions"&gt;Misconceptions&lt;/h2&gt;

&lt;p&gt;Many people believe that “all drugs are bad”, but in reality each chemical structure in nature is unique, and serves it’s own special purpose. To classify them all as “bad” because some legal doctrine says so, is ignorance of the highest degree (please excuse my frankness).&lt;/p&gt;

&lt;p&gt;Over the decades the propaganda machine has shown us pictures of deformed acid babies, and homeless people with vacant lifeless eyes roaming the streets. The truth is that psychedelic substances, unlike opiates and amphetamines, aren’t actually addictive, and these horrifying images are more indicative of heroine and ice abusers. If fact, it’s interesting to note that people who have used psychedelics tend to be more intelligent and open minded. Anyone who claims otherwise has probably never tried them, or has an ulterior motive or hidden agenda.&lt;/p&gt;

&lt;p&gt;Many great and famous people throughout history have used substances like LSD for inspiration and insight. &lt;a href="http://en.wikipedia.org/wiki/Steve_Jobs"&gt;Steve Jobs&lt;/a&gt; used LSD to invision his world changing range of Apple products. If “think different” isn’t a classic psychonaut’s motto, then I don’t know what is! Jobs says it best in his own words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Taking LSD was a profound experience, one of the most important things in my life. LSD shows you that there’s another side to the coin, and you can’t remember it when it wears off, but you know it. It reinforced my sense of what was important—creating great things instead of making money, putting things back into the stream of history and of human consciousness as much as I could.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nobel Prize winner &lt;a href="http://en.wikipedia.org/wiki/Francis_Crick"&gt;Francis Crick&lt;/a&gt;, and the pioneer of modern genetics is another. He regularly took small amounts of LSD to aid his thought process, and he claims it was LSD that helped him to unravel and discover the double-helix structure of DNA.&lt;/p&gt;

&lt;p&gt;There are many other noteworthy examples, but less known and no less incredible are the &lt;a href="https://www.google.com/search?q=alex+grey"&gt;artworks&lt;/a&gt; of &lt;a href="http://en.wikipedia.org/wiki/Alex_Grey"&gt;Alex Grey&lt;/a&gt;. Alex Grey also attributes his insight and undertanding of the energetics of the human form to the use of LSD.&lt;/p&gt;

&lt;p&gt;Like anything, psychedelics can be abused and overused. In people who overuse psychedelics we can observe a rift or disassociation with reality, in which they find it hard to focus and apply themselves. However, it’s difficult to link this directly to the use of psychedelics, since theres a high likelihood that the kind of people who would abuse psychedelics would already be afflcited with attention defecit disorders.&lt;/p&gt;

&lt;p&gt;It should also be aknowledged that psychedelics aren’t for everyone, and can even be terrifying for those with a fragile state of mind, or a traumatic past. They need to be used and respected for what they are, not a common “party drug”, but as a powerful tool for the purpose of knowledge and insight.&lt;/p&gt;

&lt;!--
 as these traits can also be naturally observed in 

in the first place 

, such as people with "escapist" tendencies, or people who spend too much time "living in their head".


, much to the discomfort of the user
Alex … is an incredible artist with an unparalleled understanding of the human form, who also attributes his insight to the use of LSD.

Contrary to the message spread by the propaganda machine campaigns, Psycadelics substances, unlike opiates and amphetamines, aren’t addictive. If misused, or overused, they may have adverse affects on the mental state of the user, but if taken occasionally with the right motivation and they can offer unprecedented insight into the nature of like and reality, that would not otherwise be available to the individual. The nature and intensity of the psychedelic "trip" is such that it’s not addictive  like other substances, such as amphetamines and opiates, and anyone who states otherwise has obviously never tried them or has al anterior agenda.

Throughout the decades there has been much anti-drug propaganda, but it bares little connection to reality. The kind of ignorance which proliferates that "all drugs are bad" must be avoided at all costs, each molecule in nature is unique, and serves it’s own unique purpose. 

The Buddhists used psychedelics when at the verge of enlightenment, in order to traverse the final bridge to enlightnment.

for thousands of years as a sacred medicine, 

## Effects of drugs on the brain
	neuro stuff
	pineal gland
	released at birth and death
	same dosage

## Cultures

### American Indians

### Chinese
Throughout history
The American indians 
The Chinese 
, which grows in and around the deserts of Mexico and the American Southwest. Peyote has been consumed by the Mexican natives for centuries, with tales of of Peyote rituals among the Aztec and Toltec indians dating back some 3000 years.


 details the course of a Mescaline trip, 

, a book that would transform publi perception about Mescaline, and play a lard part in spawning the coming revolution of the mind and spirit.

Richard Manske sysnthesis —

- used for thousands of years by south american indigenous natives (ayahuasca)
- naturally exists in living things
	- released both and death
	- pineal gland
	- same dosage applies
- first synthesised by manske

### DMT Shamanism
The amazing thing is that 
DMT has been used by the jungle shamans of South Americs for thousands of years. 

### DMT Effects
--&gt;

&lt;h2 id="lsd"&gt;LSD&lt;/h2&gt;

&lt;p&gt;Lysergic Acid Diethylamine, commonly referred to as LSD, LSD-25, or Acid, is a semi-synthetic substance synthesised from ergotamine, an alkaloid present in &lt;a href="http://en.wikipedia.org/wiki/Ergot"&gt;ergot&lt;/a&gt;. Ergot is a parasitic, and highly toxic fungus known as Clabviceps Purpurea, which grows on the Rye plant. In the middle ages, ergot was responsible for a number of epidemics when ergot infected Rye was milled into bread and consumed by thousands, causing ergotism (ergot poisoning, commonly known as “Saint Anthonies Fire”) on a mass public scale.&lt;/p&gt;

&lt;p&gt;LSD was inadvertently discovered by &lt;a href="http://www.hofmann.org/"&gt;Albert Hoffman&lt;/a&gt; in 1938, while working on a research project for the Swiss drug company, Sandoz. At the time, Hoffman’s research was focused on Lysergic Acid, a compound derived from ergot, for a number of medicinal applications. When Hoffman first synthesised LSD-25, he hoped that it would be able stimulate breathing and circulation. After the first round of tests were inconclusive, LSD-25 was shelved despite Hoffman feeling that the compounds potential hadn’t beed fully explored.&lt;/p&gt;

&lt;p&gt;Five years later, Hoffman’s thoughts returned to LSD-25, and he took the unusual step of synthesising another batch for further testing. During the testing process, Hoffman must have got some on his finger and touched it to his mouth (LSD cannot be absorbed through the skin), because he had to stop work and leave home early due to a feeling of “being affected by a feeling of remarkable restlessness, combined with a slight dizziness”. According to Hoffman, during his bike ride home, and later that night, he “perceived an uninterrupted stream of fantastic pictures, extraordinary shapes with intense, kaleidoscopic play of colours”.&lt;/p&gt;

&lt;p&gt;Hoffman reported his findings to Sandoz, who ran more clinical trials, and were very excited by their initial findings; no other substance was so potent at such low quantity, and had such a low toxicity relative to the dosage. Sandoz quickly saw the potential of LSD for use in psychotherapy, and provided LSD samples to research instates and doctors for further psychiatric experimentation. By 1947, the research was compelling enough to convince Sandoz to patent LSD, and package and market it as Delysid to be sold in 25 microgram tablets for use in psychotherapy. &lt;/p&gt;

&lt;p&gt;When Sandoz threw open the doors to “anyone” who cared to purchase LSD, the Americal Central Intelligence Agency (CIA) became paranoid. The CIA knew the Russians were engaged in tests to create truth serums, and undermine the behaviour and personalities of regular people to turn them into unwitting and involuntary assassins. This has the CIA spooked, the U.S. government started their own experiments by testing the effects of the drug. From 1953 to 1964, the CIA ran a program called MK-ULTRA, which was an umbrella operation covering 149 subprojects with the purpose of exploring new methods of chemical and psychological warfare. Experiments were conducted on voluntary subjects in exchange for her heroin and other drugs, and on hundreds of unsuspecting American civilians, prison inmates, federal agents, and military personal. &lt;/p&gt;

&lt;p&gt;In 1975 congress held inquiries into the alleged clandestine operation named MK-ULTRA, but CIA maintained it’s standard silence; the files had been destroyed and the new directors had no knowledge of old projects. Two years later, the skeleton that was MK-ULTRA in the CIA’s closet emerged entirely, thanks to a Freedom of Information act request lodged by a journalist that turned up several boxes of information that had escaped destruction. These documents exposed information on places, names, methods of electro-shock torture, poisoning by sleight of hand, how they used hookers to lure unsuspecting civilians for undisclosed testing, slipped LSD into drinks at bars, and conducted interrogations with subjects under the prolonged influence of LSD. &lt;/p&gt;

&lt;p&gt;On the flip side, when LSD escaped the lab it was quickly evangelised by hippies and clandestine chemists such as Owsley Stanley. LSD was the drug of choice which played a pivotal role in the consciousness shift that enabled the 1960’s counterculture and revolution to take place.&lt;/p&gt;

&lt;p&gt;An interesting thing to note is the contrast in the way the way LSD has been perceived and used by different groups. Just as one segment of the American population started experimenting with the drug in order to produce peace and spiritual awakening, their government was using the same drug to try and “brainwash” people into compliance. Where the hippies saw unity and joy; the CIA saw paranoia and fear.&lt;/p&gt;

&lt;!--
 that started in the San Fransisco bay area, and spread throughout the western world during the 1960’s and 1970’s.
some of the MK-ULTRA documents that escaped destruction were discovered by a journalist 

are now declassified, and expose information on 

but  only after they were leaked, and some of the test subjects coming forward with public testimonies such as U.S. Marshal Wayne Ritchie, one can’t help but to wonder how much of what really happened will ever see the light of day.

We Some of the material on the CIA
before LSD escaped the lab and was evangelised by hippies and chemists operating behind the iron curtain, 
potential LSD purchasers, 
he burgeoning field of (psychedelic psychotherapy?) rapidly adopted LSD, and by 1960 hundreds of parers were published in scientific journals on the various uses of LSD.
—————— use in the 60’s revolution
The 60’s saw LSD incorporated into an entire culture shift, away from conformatism, towards freedom and self-expression.

The younger generation until then had only experienced a life of conformatism, but now they had an alternative, and for a time it was beautiful. The revolution was about free love, and peace, spurred by the taking of mind-altering psycadellics. People lived as one heart, and one soul, yet as seems to be the curse of our existence, too much of a good thing isn;t sustainable, kind of like natures way of keeping us on track. (ugg)

To concede with the 60’s revolution, the govern began their own more sinister experimentation on this amazing new molecule

The government, however, had had a much more sinister motivation for their interest in LSD. They wanted to use it for the purpose of control, to create super soldiers through prolonged use of psychedelics, coupled with extreme conditions and suggestive thinking - in short brain washing.

These unfortunate experiments, such as MKULTRA (link to gov docs) and …?, apparently yielded no usable results (that we know of), with subjects tending to go insane and loosing grip of reality altogether.


Sandoz stopped making LSD by 1966, apparently due to the company claiming there was a lack of regulation and inaccurate information being permeated about the drug.
Naturall, this didn’t discourage chemists from manufacturing LAD, which was legal to do until 1965.


### Synthesis

organic chemistry, black light, 

——————

Probably the single greatest discovery of our modern era was that of LSD, by the late DR Hoffman (dead?). The story goes that DR Hoffman was experimenting with enrol derivatives, when he made a change discovery that would be largely responsible for the large shift in consciousness and the 60’s revolution.

Enrot was a substance that was responsible for the … plague, and the subsequent witch burnings in the 18…s. It is a small fungus that infected the Rye plant, and in turn was milled into bread poisoning a large population of the … and responsible for the … plague and the … in …    ergotism

At the time Dr hoffman was experimenting with ergot related derivatives for use in medicine when he by change synthesised the substance that would be largely responsible for the modern revolution and the mass shift in consciousness in the 60’s.

At the time Hoffman synthesised LSD, he had no idea of it’s inherent properties, but had an intuition that there was something special about the molecule (he had tries to synthesise it a few times before). After finding no apparent medical applications for the substance, he head home on the bicycle, at which time he started to feel a little strange. Before long the sky broke out in kaleidoscopic colours and hallucinations and he knew he had discovered something special. Upon returning home, He notified his colleague at the time, dr. …, and commenced full research into this amazing new substance. 

… talk about their research, and discovery by the government …

## Mescaline

## DMT
--&gt;

&lt;h2 id="dmt"&gt;DMT&lt;/h2&gt;

&lt;p&gt;DMT, or Dimethyltryptamine, is a member of the tryptamine family, and is arguably the most fascinating psychedelic substance known to man. DMT exists naturally within each one of us, and in trace amounts in almost every living plant and animal. It could be said that DMT is the “spirit molecule”, the link between the physical body and the realm of spirit.&lt;/p&gt;

&lt;p&gt;Despite modern advancements in neuroscience, modern science actually knows very little about DMT. The DMT molecule is structurally analogous to the neurotransmitter serotonin (5-HT) and the hormone melatonin, and furthermore functionally analogous to other psychedelic tryptamines, such as bufotenin, and psilocybin. We know that DMT is stored in the pineal gland inside the brain, and is excreted at the time of death, but the significance of its widespread natural presence or propose remains undetermined.&lt;/p&gt;

&lt;p&gt;DMT was first synthesised in 1931 by Canadian chemist Richard Helmuth Fredrick Manske, but in fact it’s been used as a psychedelic drug for divinatory and healing purposes by the Amazonian Indians for thousands of years. Obviously the jungle shamans didn’t synthesise or extract pure DMT in their laboratories, but looking at some of the facts they apparently know a lot more about it than we do today. By combining plants with high levels of DMT, and a particular vine that serves as a natural MAO inhibiter, the jungle shamans created a brew called ayahuasca. DMT is not psychoactive when consumed orally, but they somehow knew that by combining DMT yielding plants with a naturally occurring MAOI, not only could the DMT be absorbed by the digestive track, but the experience could be stretched from several minutes to several hours. It remains unclear as to how these shamans were able to devise this ingenious method of ingesting DMT, but one can only speculate that they were able to divine it through deeper a connection with the plants, and some even say they were provided instruction by the plant spirits themselves.&lt;/p&gt;

&lt;p&gt;One area that warrants further investigation is the similarity of the effects of DMT to those reported by NDEs (Near Death Experiences) and OBEs (Outer Body Experiences). People who have experienced temporary brain death often report travelling towards a “light at the end of the tunnel”, and having conversations with spiritual entities - all of which are indicative of the DMT experience. &lt;/p&gt;

&lt;p&gt;When taking DMT one often experiences leaving the body completely, and traversing space or what could only be described as passing through many alternate dimensions at a very fast rate. After the initial experience of travelling, it’s not uncommon to meet certain spirits or entities with which one can converse. Many report these entities taking the familiar guise of people known over the course of one’s lifetime, either living or dead. The common factor with the entities encountered during these meetings is their transcendental wisdom, and while the interactions and conversations held with them van vary greatly from person to person, through them one can gain insight into a great many things, such as the clarity around past and present choices, the deeper meaning of things, and the purpose of one’s life.&lt;/p&gt;

&lt;p&gt;These experiences can be very frightening for some, especially those that have strayed from their path and are brought face to face with the reality of their choices without mercy or remorse. However, and almost always yields positive results for the person involved, and is always illuminating. The trick is not to hold on, but to yield oneself fully to the experience, because control is just an illusion, and anything less than absolute truth cannot exist within the realm of DMT.&lt;/p&gt;

&lt;h2 id="mescaline"&gt;Mescaline&lt;/h2&gt;

&lt;p&gt;Mescaline or 3,4,5-trimethoxyphenethylamine is the naturally occurring alkaloid present in the &lt;a href="https://www.erowid.org/plants/peyote/peyote.shtml"&gt;peyote&lt;/a&gt; cactus (Lophophora williamsii), the &lt;a href="http://en.wikipedia.org/wiki/Echinopsis_pachanoi"&gt;San Pedro&lt;/a&gt; cactus (Echinopsis pachanoi) and in the Peruvian torch (Echinopsis peruviana), and as well in a number of other members of the Cactaceae plant family. It’s also found in small amounts in certain members of the Fabaceae (bean) family, including Acacia berlandieri.&lt;/p&gt;

&lt;p&gt;Mescaline is a member of the phenethylamine class, but it’s hallucinogenic qualities bear more similarity to members of the tryptamine class, such as LSD and psilocybin.&lt;/p&gt;

&lt;p&gt;Peyote has been used for at least 5700 years by Native Americans in Mexico. Europeans noted use of peyote in Native American religious ceremonies upon early contact, notably by the Huichols in Mexico. Other mescaline-containing cacti such as the San Pedro have a long history of use in South America, from Peru to Ecuador.&lt;/p&gt;

&lt;p&gt;Peyote and other divine plants, including “magic” psilocybin mushrooms, morning glory seeds, and datura, were employed for the purposes of healing, divining the future, and producing visions during sacred rites and rituals. Peyote was believed to be a god-powerful medicine, with the ability to give sight to the blind and healing incurable diseases.&lt;/p&gt;

&lt;p&gt;The arrival of the Spanish Conquistadors in the 16the century forced these age old traditions and cultures into the underground. They quickly outlawed “peyotism”, linking it with witchcraft and cannibalism, and enacted the first “anti-drug” laws in the western hemisphere. &lt;/p&gt;

&lt;p&gt;For the most part the Conquistadors succeeded, driving the indigenous peyote based religion underground for the next 200 or so years, until the American Civil War. During the American Civil War, peyote began spreading from Mexico on a large scale. Indian prophets such as Quanah Parker and John Wilson, modified the traditional teachings, blending the traditional Peyote chants and rituals with Christian Theology and belief in Jesus. The Christianised versions of the traditional rituals were carried to more than fifty American tribes, including the Chyenne, Shawne, Blackfoot, and Sioux, all the way to north Canada.&lt;/p&gt;

&lt;p&gt;In 1918, a group of peyotists formed the Native American Church to preserve peyote rituals and fight for the continued sacramental use of the plant. Even though laws in 11 states eventually sought to ban the religious use of Peyote, federal courts affirmed the right to sacramental use by the native American members of the 250,000 member church.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Aldous_Huxley"&gt;Aldous Huxley&lt;/a&gt; played a huge part in transforming public perception about mescaline. Huxley was a well known English literary scholar and controversial writer from the prominent Huxley family, probably best known for his book “&lt;a href="http://en.wikipedia.org/wiki/Brave_New_World"&gt;A Brave New World&lt;/a&gt;”. A Brave New World paints a grim picture of a dystopian world ruled by a single corporation, in which people are cloned for their specific roles in society, and drugged from birth so as to never question their role in society. Alphas represent the aristocrats and politicians, Betas are administrators and managers, and Deltas are the workers and labourers. Despite the grim concept and setting, the book paints a picture of hope as the main character awakens to realise the lie he has been taught, and begins his own personal revolution. Since the book was written back in 1931, many people, especially today, say Huxley was a prophet with an uncanny ability to glimpse the future.&lt;/p&gt;

&lt;p&gt;In 1954, Aldous Huxley began experimenting with mescaline, and as a result he wrote “&lt;a href="http://en.wikipedia.org/wiki/The_Doors_of_Perception"&gt;The Doors of Perception&lt;/a&gt;”. The book is a vivid visual commentary on life, art and culture as perceived through the eyes of mescaline. “The Doors of Perception” was one of the key literary works responsible for the 60’s social revolution and counterculture. It’s safe to say that with it, Huxley changed the world. Without it there would be no luminaries such as Timothy Leary and Allen Ginsburg, no “turn on, tune in, drop out”, no Merry Pranksters, no Sergeant Pepper, and no Fear and Loathing in Las Vegas.&lt;/p&gt;

&lt;p&gt;In 1955, English politician Christopher Mayhew took part in an experiment for &lt;a href="https://www.youtube.com/watch?v=Hd4rgyZzseY"&gt;BBC’s Panorama&lt;/a&gt;, in which he ingested 400mg of mescaline under the supervision of psychiatrist Humphry Osmond. Though the recording was deemed too controversial and ultimately omitted from the show. Mayhew praised the experience, calling it “the most interesting thing I ever did”.&lt;/p&gt;

&lt;p&gt;In 1990 the challengers finally had their day, with the US supreme court affirmed the right of individual states to control ritual use. Today, Mescaline is illegal in most parts of the world.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As humans it’s our duty to evolve as individuals and as a species, but as time goes by the odd stack up against us as our reliance on technology strengthens, and our connection to nature weakens. The powers that be seek to keep us distracted from the path with their weapons of fear and control, but we have our own weapons that exist freely in nature, and within ourselves. &lt;/p&gt;

&lt;p&gt;Psychedelics help us to perceive the reality of our existence and break down the barriers of duality that separate our collective minds. They show us that the “system” we work for is fundamentally flawed, and compromised at the highest level, they show us that the social conditioning and unconscious patterning that binds our minds is laughable, they show us that science and religion doesn’t hold the answers we’re looking for, and most of all they teach us the wisdom and insight to move forward with love in our hearts and a smile on our faces - despite the madness we’ve created.&lt;/p&gt;

&lt;!--
In order to improve our understanding of the nature of reality and who we are we need to explore all possibilities. 
We need to explore all possibilities in order to gain a greater understanding of the fabric and nature of reality. Therefore, it’s in our best interests we need to put aside our social conditioning, and open our minds to the possibility that science does’t hold the answers, and that the rules enforced upon us by those in power are not necessarily for our own good, they are often to keep us blind to the truth, because let’s face it, what leader that rules by fear and control wants 6 billion liberated free thinkers on their hands? 

, so no wonder they are illegal.

If one has never gazed into the eyes of your lover or soulmate on mescaline, all I can say to you is "don’t knock it till you’ve tried it".

control our minds with 
Each different molecule in nature has it’s own unique signature and properties, so stop proliferating the ignorance of classifying all substances as ‘drugs’ just because they’re illegal.
It is therefore, in our best interests to put aside our social conditioning, and open our minds to the possibility that science does’t have all the answers in order to explore all possibilities.
--&gt;

&lt;h2 class="no_toc" id="attribution"&gt;Attribution&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="#banner"&gt;LSD&lt;/a&gt; by &lt;a href="http://studiofeng.net"&gt;Alice Feng&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  <entry>
    <title>Building a Simple C++ Cross-platform Plugin System</title>
    <link rel="alternate" href="http://sourcey.com/building-a-simple-cpp-cross-platform-plugin-system/"/>
    <id>http://sourcey.com/building-a-simple-cpp-cross-platform-plugin-system/</id>
    <published>2014-05-29T00:00:00Z</published>
    <updated>2014-06-02T21:48:16+10:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#abi-and-binary-compatibility"&gt;ABI and Binary Compatibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#interprocess-memory-handling"&gt;Interprocess Memory Handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#plugin-system-api"&gt;Plugin System API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#plugin-api"&gt;Plugin API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#implementing-plugins"&gt;Implementing Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#a-simple-application"&gt;A Simple Application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#installing-pluga"&gt;Installing Pluga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;This article talks about some key factors to consider when designing a plugin system in C++, and also provides some practical examples of how we’ve addressed these issues in our own code. There’s a lot to cover here, such as binary compatibility, strict API versioning, and interprocess memory management. Sounds like fun right? Well, if you get it wrong then it sure as hell won’t be, sometime in the near future you’ll most likely have a suicide inducing customer support nightmare on your hands, but if you get it right then it’s really not so bad.&lt;/p&gt;

&lt;p&gt;If you’re looking for the code, we’ve released it as an open source &lt;a href="http://sourcey.com/LibSourcey"&gt;LibSourcey&lt;/a&gt; module called &lt;a href="http://sourcey.com/pluga"&gt;Pluga&lt;/a&gt; on &lt;a href="https://github.com/sourcey/pluga"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="abi-and-binary-compatibility"&gt;ABI and Binary Compatibility&lt;/h2&gt;

&lt;p&gt;The first thing to consider when designing your &lt;a href="#plugin-api"&gt;Plugin API&lt;/a&gt; is &lt;a href="http://en.wikipedia.org/wiki/Application_binary_interface"&gt;ABI&lt;/a&gt; compatibility. Unlike dynamically scripted languages, C++ demands that any shared libraries loaded by the runtime are binary compatible, otherwise all hell breaks loose. Essentially, this means that both the application and plugins must be compiled using the exactly the same development environment.&lt;/p&gt;

&lt;p&gt;If you can, try and stick to this one simple rule: only pass POD (plain old data) data types across process boundaries. By sticking to POD types the binaries will have no interdependent shared libraries, and you can avoid binary compatibility issues altogether. &lt;/p&gt;

&lt;p&gt;The tradeoff is that standard libraries differ from compiler to compiler, platform to platform, even version to version, so they should always be deemed to be binary incompatible. This means that unless you want to force clients to use exactly the same OS, compiler and third party dependencies as you when buildng plugins for your application, then you’ll need to avoid using STL containers or other complex types in your &lt;a href="#plugin-api"&gt;Plugin API&lt;/a&gt;.
“But this is C++!?”, you cry in anguish, and unless you’re rockin’ a mullet with a stubbie cooler then who could blame you? Unfortunately that’s just the way it is, so in this case all we can do is bite our collective upper lip and move on. &lt;/p&gt;

&lt;!--
Even the standard libraries themselves are not binary compatible, 
    they
, then stick to POD
, and no throwing standard exceptions either.
--&gt;

&lt;p&gt;There are alternatives, such as embedding the standard libraries in your project using &lt;a href="http://www.stlport.org"&gt;STLport&lt;/a&gt; or similar to ensure consistency between platforms, but why bother? It seems like overkill, wouldn’t it be easier to just to pass a &lt;code&gt;void*&lt;/code&gt; or a &lt;code&gt;char*&lt;/code&gt; buffer and encode/decode it as required across the process boundary?&lt;/p&gt;

&lt;p&gt;The method we’ve been using recently is actually quite simple. The plugin implements a &lt;code&gt;onCommand&lt;/code&gt; method which accepts arbitrary commands from the application. The advantage of using this type of interface is that you’re able to implement almost any kind of functionality without having to add new methods and break the API each time you roll out a new feature. Obviously it doesn’t have it be this simple, but you get the idea!&lt;/p&gt;

&lt;p&gt;Command nodes (see code below) are namespaced using a &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; style interface like so &lt;code&gt;resource:action&lt;/code&gt;, and the data buffer contains either a JSON encoded message which for representing and converting to an STL container such a &lt;code&gt;std::vector&lt;/code&gt; or &lt;code&gt;std::map&lt;/code&gt; to pass to the internal API, or it may just be a raw data buffer that can be used directly.&lt;/p&gt;

&lt;p&gt;Take, for example, the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Handle a JSON encoded options hash
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"options:set"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;          
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Invalid JSON format: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFormatedErrorMessages&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                
            &lt;span class="c1"&gt;// Do something with JSON data here...
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Handle raw file data
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"file:write"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.bin"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ofstream&lt;/span&gt; &lt;span class="n"&gt;ofs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ofs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot write to output file: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ofs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ofs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Handle unknown commands
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unknown command"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Catch exceptions here and return false.
&lt;/span&gt;        &lt;span class="c1"&gt;// You could set a lastError string here which is exposed to
&lt;/span&gt;        &lt;span class="c1"&gt;// the application that returns the error message as a char*.
&lt;/span&gt;        &lt;span class="c1"&gt;// See the full example for details.
&lt;/span&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cerr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Command error: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- TODO: Helper methods that convert to data structures and throw exceptions --&gt;

&lt;h2 id="interprocess-memory-handling"&gt;Interprocess Memory Handling&lt;/h2&gt;

&lt;p&gt;One other simple rule that will save you no small amount of frustration later on down the track is: any memory allocated by a process should be deallocated by the same process. &lt;/p&gt;

&lt;p&gt;Let’s say the application asks the plugin to allocate and return a &lt;code&gt;char*&lt;/code&gt; buffer, and then proceeds to delete the buffer when it’s done with it. Honk! Big no no, you’re just asking for a crash.&lt;/p&gt;

&lt;p&gt;This is good:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;askPluginForSomeSugar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="c1"&gt;// allocate buffer of some sort
&lt;/span&gt;    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gimmeSomeSugarBaby&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// do something cool with data
&lt;/span&gt;
    &lt;span class="c1"&gt;// hand the pointer back to the plugin to be deallocated
&lt;/span&gt;    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;putSugarBackInTheBowl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is bad:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;askPluginForSomeSugar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="c1"&gt;// allocate buffer of some sort
&lt;/span&gt;    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gimmeSomeSugarBaby&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// do something cool with data
&lt;/span&gt;
    &lt;span class="c1"&gt;// don't manage memory data allocated by the other process!
&lt;/span&gt;    &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="plugin-system-api"&gt;Plugin System API&lt;/h2&gt;

&lt;p&gt;The Pluga plugin system API consists of a single header file that defines a set of macros which export a &lt;code&gt;PluginDetails&lt;/code&gt; structure. The &lt;code&gt;PluginDetails&lt;/code&gt; structure exposes basic plugin information, a compile time API version, and a static initialiser function to the main application on runtime. By having an intermediary &lt;code&gt;PluginDetails&lt;/code&gt; structure that’s loaded on runtime before the plugin is instantiated, we can do things like sanity check the API version, and print information about the plugin.&lt;/p&gt;

&lt;p&gt;Note that the system API also forward declares the &lt;code&gt;IPlugin&lt;/code&gt; type, which must be defined externally in your own code. See the &lt;a href="#plugin-api"&gt;Plugin API&lt;/a&gt; for more information about that.&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="c1"&gt;//
// LibSourcey
// Copyright (C) 2005, Sourcey &amp;lt;http://sourcey.com&amp;gt;
//
// LibSourcey is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// LibSourcey is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
//
&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef SCY_Pluga_H
#define SCY_Pluga_H
&lt;/span&gt;

&lt;span class="cp"&gt;#include "scy/base.h"
&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;scy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;pluga&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


&lt;span class="c1"&gt;// Forward declare the plugin class which must be defined externally.
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IPlugin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Define the API version.
// This value is incremented whenever there are ABI breaking changes.
&lt;/span&gt;&lt;span class="cp"&gt;#define SCY_PLUGIN_API_VERSION 1
&lt;/span&gt;    
&lt;span class="cp"&gt;#ifdef WIN32
# define SCY_PLUGIN_EXPORT __declspec(dllexport)
#else
# define SCY_PLUGIN_EXPORT // empty
#endif
&lt;/span&gt;
&lt;span class="c1"&gt;// Define a type for the static function pointer.
&lt;/span&gt;&lt;span class="n"&gt;SCY_EXTERN&lt;/span&gt; &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;IPlugin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;GetPluginFunc&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

&lt;span class="c1"&gt;// Plugin details structure that's exposed to the application.
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;PluginDetails&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pluginName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pluginVersion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;GetPluginFunc&lt;/span&gt; &lt;span class="n"&gt;initializeFunc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cp"&gt;#define SCY_STANDARD_PLUGIN_STUFF \
    SCY_PLUGIN_API_VERSION,       \
    __FILE__
&lt;/span&gt;
&lt;span class="cp"&gt;#define SCY_PLUGIN(classType, pluginName, pluginVersion)     \
  extern "C" {                                               \
      SCY_PLUGIN_EXPORT scy::pluga::IPlugin* getPlugin()     \
      {                                                      \
          static classType singleton;                        \
          return &amp;amp;singleton;                                 \
      }                                                      \
      SCY_PLUGIN_EXPORT scy::pluga::PluginDetails exports =  \
      {                                                      \
          SCY_STANDARD_PLUGIN_STUFF,                         \
          #classType,                                        \
          pluginName,                                        \
          pluginVersion,                                     \
          getPlugin,                                         \
      };                                                     \
  }
&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// namespace scy::pluga
&lt;/span&gt;

&lt;span class="cp"&gt;#endif // SCY_Pluga_H
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="plugin-api"&gt;Plugin API&lt;/h2&gt;

&lt;p&gt;The plugin API defines the &lt;code&gt;IPlugin&lt;/code&gt; class that’s forward declared in the &lt;a href="#plugin-system-api"&gt;Plugin System API&lt;/a&gt; header. The &lt;code&gt;IPlugin&lt;/code&gt; class is the interface that the application uses to interact with the plugin, and as such it’s also the virtual base class that’s extended from when &lt;a href="#implementing-plugins"&gt;implementing plugins&lt;/a&gt;.&lt;/p&gt;

&lt;!--
which exposes all the methods 
is the class that's extended when [implementing plugins](#implementing-plugins), and also

This class defines all the 
virtual plugin methods and functionality exposed by your application, and is also the class to be extended when [implementing plugins](#implementing-plugins).



header file which 

This is the header

All virtual plugin methods and functionality are exposed by , 

 will be distributed to your clients and customers for extending and implementing their own plugins.
--&gt;

&lt;p&gt;Below is a bare-bones example that only implements a single &lt;code&gt;onCommand&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="c1"&gt;// testpluginapi.h
&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef SCY_TestPluginAPI_H
#define SCY_TestPluginAPI_H
&lt;/span&gt;

&lt;span class="cp"&gt;#include "scy/pluga/pluga.h"
&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;scy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;pluga&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IPlugin&lt;/span&gt;
    &lt;span class="c1"&gt;// Virtual plugin interface.
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;IPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;IPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Handles a command from the application.
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// namespace scy::pluga
&lt;/span&gt;

&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="implementing-plugins"&gt;Implementing Plugins&lt;/h2&gt;

&lt;p&gt;Plugin implementations extend from the &lt;a href="#plugin-api"&gt;Plugin API&lt;/a&gt; interface to implement plugin functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="c1"&gt;// testplugin.h
&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef SCY_TestPlugin_H
#define SCY_TestPlugin_H
&lt;/span&gt;

&lt;span class="cp"&gt;#include "testpluginapi.h"
&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestPlugin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;scy&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;pluga&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPlugin&lt;/span&gt; 
    &lt;span class="c1"&gt;// Test plugin implementation.
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Handles a command from the application.
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="c1"&gt;// testplugin.cpp
&lt;/span&gt;
&lt;span class="cp"&gt;#include "testplugin.h"
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;

&lt;span class="n"&gt;SCY_PLUGIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Test Plugin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"0.1.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"TestPlugin: Create"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="o"&gt;::~&lt;/span&gt;&lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"TestPlugin: Destroy"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
  

&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;TestPlugin&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"TestPlugin: Command: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;": "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="c1"&gt;// Process commands as required
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="a-simple-application"&gt;A Simple Application&lt;/h2&gt;

&lt;p&gt;The following is a totally minimal example application that shows how to use the LibSourcey &lt;code&gt;SharedLibrary&lt;/code&gt; class to load the plugin shared library, instantiate the &lt;code&gt;IPlugin&lt;/code&gt;, call it’s methods, and destroy it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="cp"&gt;#include "scy/pluga/pluga.h"
#include "scy/sharedlibrary.h"
#include "testpluginapi.h"
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;assert.h&amp;gt;
&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;scy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// Set the plugin shared library location
&lt;/span&gt;    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCY_INSTALL_PREFIX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"/bin/testplugin/testplugin"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#if WIN32
# ifdef _DEBUG
&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"d.dll"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;# else
&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;".dll"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;# endif
#else
&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;".so"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif
&lt;/span&gt;    
    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Load the shared library        
&lt;/span&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Loading: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;SharedLibrary&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        
        &lt;span class="c1"&gt;// Get plugin descriptor and exports
&lt;/span&gt;        &lt;span class="n"&gt;pluga&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PluginDetails&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"exports"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;reinterpret_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;**&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Plugin Info: "&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;API Version: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;File Name: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;Class Name: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;className&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;Plugin Name: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pluginName&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;Plugin Version: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pluginVersion&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        
        &lt;span class="c1"&gt;// API Version checking 
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;SCY_PLUGIN_API_VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Plugin ABI version mismatch. Expected %s, got %s."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                    &lt;span class="n"&gt;SCY_PLUGIN_API_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        
        &lt;span class="c1"&gt;// Instantiate the plugin
&lt;/span&gt;        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;reinterpret_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pluga&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPlugin&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;initializeFunc&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      
        &lt;span class="c1"&gt;// Call plugin methods
&lt;/span&gt;        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some:command"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"random:data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  

        &lt;span class="c1"&gt;// Close the plugin and free memory
&lt;/span&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Closing"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cerr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Error: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;   

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="installing-pluga"&gt;Installing Pluga&lt;/h2&gt;

&lt;p&gt;For more detailed instructions and full working example see the &lt;a href="http://sourcey.com/pluga#installation"&gt;Pluga insallation guide&lt;/a&gt;. All that’s requires is to build build &lt;a href="http://sourcey.com/libsourcey"&gt;LibSourcey&lt;/a&gt; with the &lt;a href="https://github.com/pluga"&gt;Pluga&lt;/a&gt; module enabled.&lt;/p&gt;

&lt;p&gt;And there you have it, a super simple C++ plugin system that you can use in your own projects. Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Comparing Version Strings in C++</title>
    <link rel="alternate" href="http://sourcey.com/comparing-version-strings-in-cpp/"/>
    <id>http://sourcey.com/comparing-version-strings-in-cpp/</id>
    <published>2014-05-22T00:00:00Z</published>
    <updated>2014-06-01T15:35:35+10:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;p&gt;If you’re building any kind of version management system in C++, such as a package manager or plugin system, then you’ll need to be able to maniulate, compare and print version strings. The &lt;code&gt;Version&lt;/code&gt; structure below is extracted from &lt;a href="/pacm"&gt;pacm&lt;/a&gt;, and does exactly that:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;revision&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

	&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;sscanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"%d.%d.%d.%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;

	&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;

	&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; 
			&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt; 
			&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt; 
			&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;

	&lt;span class="k"&gt;friend&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ostream&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ostream&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
	&lt;span class="p"&gt;{&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight cpp"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testVersionStringComparison&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8.0"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.9"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.9"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1.7.9"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.1"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
	
	&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Printing version (3.7.8.0): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"3.7.8.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Agile Peer Code Reviews with Codebrag</title>
    <link rel="alternate" href="http://sourcey.com/agile-peer-code-reviews-with-codebrag/"/>
    <id>http://sourcey.com/agile-peer-code-reviews-with-codebrag/</id>
    <published>2014-05-21T00:00:00Z</published>
    <updated>2014-06-01T15:35:57+10:00</updated>
    <author>
      <name>Mirek Woźniak</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#fun--different"&gt;Fun = Different?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#less-loss"&gt;Less Loss&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#lightweight-and-secure"&gt;Lightweight and Secure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#status--plans"&gt;Status &amp;amp; Plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;It’s Friday afternoon and you’re sitting in the office, extinguishing the fire on the production server.
You promise yourself that it won’t happen again, not after tonight. But it happened in the past. And might happen in the future. &lt;/p&gt;

&lt;p&gt;Well, we’ve been there. Experienced the frustration and tiredness of staying late and fixing bugs. That’s why we’ve decided to do something about it.
Enter &lt;a href="http://codebrag.com"&gt;Codebrag&lt;/a&gt;, the code review tool your team will actually use.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Codebrag" title="Codebrag" src="/agile-peer-code-reviews-with-codebrag/cbr-landing-snippet.png" /&gt;&lt;/p&gt;

&lt;h2 id="fun--different"&gt;Fun = Different?&lt;/h2&gt;

&lt;p&gt;Why you don’t like code reviews? &lt;/p&gt;

&lt;p&gt;You get criticised. Your carefully crafted code gets smashed to bits and analysed like an insect under a microscope. You &lt;em&gt;have&lt;/em&gt; to do code reviews, not necessarily &lt;em&gt;want&lt;/em&gt; to do them. You get stressed and the code quality gets hurt as well.&lt;/p&gt;

&lt;p&gt;What if code reviews could be… fun? &lt;/p&gt;

&lt;p&gt;We’ve built Codebrag to make you enjoy code reviews. Starting from a game-like, friendly interface to adding “Likes” to blocks of code, Codebrag is built around the idea of a positive atmosphere of software craftsmanship.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Codebrag App Overview" title="Codebrag App Overview" src="/agile-peer-code-reviews-with-codebrag/cbr-app-overview.png" /&gt;&lt;/p&gt;

&lt;h2 id="less-loss"&gt;Less Loss&lt;/h2&gt;

&lt;p&gt;And it isn’t just for fun. You can’t really estimate the cost of an emotionally-wrecked developer. &lt;/p&gt;

&lt;p&gt;Imagine that Amazon’s down for a minute. The loss toll would be &lt;em&gt;quite&lt;/em&gt; high. Or the recent Heartbleed security loophole - isn’t this all about people not getting enough support, proper feedback and rest? Once again, Codebrag addresses those issues by allowing you to introduce flexible code reviews methods, eliminating the possibility of bugs being overlooked.&lt;/p&gt;

&lt;h2 id="lightweight-and-secure"&gt;Lightweight and Secure&lt;/h2&gt;

&lt;p&gt;You set up Codebrag on your own terms, using your servers. Just &lt;a href="http://codebrag.com#get-codebrag"&gt;download the package&lt;/a&gt;, do a quick config, clone your repository start reviewing your friends’ code. Codebrag is simple with the workflow focused on finding and eradicating problems as well as mutual learning and team support. &lt;/p&gt;

&lt;h2 id="status--plans"&gt;Status &amp;amp; Plans&lt;/h2&gt;

&lt;p&gt;Codebrag is currently in 2.0 version with Git, SVN, local and cloud repositories and both post-commit and review of feature branches support. It’s developed by people from &lt;a href="http://softwaremill.com"&gt;SoftwareMill&lt;/a&gt; as a dogfood and startup project - we use Codebrag in our projects and decided to share it with the people. You can tweet us @codebrag and visit our &lt;a href="http://blog.codebrag.com"&gt;blog&lt;/a&gt; for code review guides and Codebrag news.&lt;/p&gt;

&lt;iframe width="590" height="360" src="//www.youtube.com/embed/PxQflI7Bgxc" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>Precompiling Assets for Large Rails Deployments with Capistrano</title>
    <link rel="alternate" href="http://sourcey.com/precompiling-assets-for-large-rails-deployments-with-capistrano/"/>
    <id>http://sourcey.com/precompiling-assets-for-large-rails-deployments-with-capistrano/</id>
    <published>2014-05-20T00:00:00Z</published>
    <updated>2014-06-01T15:36:21+10:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Capistrano" title="Capistrano" src="/images/logos/capistrano-600x228.png" /&gt;&lt;/p&gt;

&lt;p&gt;If you’ve ever had to deploy a large Rails site using Capistrano, 
then you’re probably aware of how time consuming it is to precompile the assets pipeline on the server-side.&lt;/p&gt;

&lt;p&gt;This is not really an issue for a small sites with a few images and JavaScripts, 
but when it starts taking upwards of half an hour to roll out a small or time critical patch you know somethings gotta give!&lt;/p&gt;

&lt;p&gt;Some people store compiled assets using &lt;code&gt;git&lt;/code&gt; in either the master or a separate repository, but that’s kind of overkill and it also introduces an extra step. The most efficient way is just to use Capistrano’s &lt;code&gt;run_locally&lt;/code&gt; command to compile assets on the local machine and then &lt;code&gt;rsync&lt;/code&gt; them to the remote server.&lt;/p&gt;

&lt;p&gt;The following Capistrano script is what we currently use on a Rails 3.2 site, but it should work with other Rails versions too. Stick the following task somewhere in your &lt;code&gt;deploy.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:deploy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:assets&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Precompile assets locally and then rsync to deploy server"&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:precompile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:primary&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;run_locally&lt;/span&gt; &lt;span class="s2"&gt;"bundle exec rake assets:precompile"&lt;/span&gt;
      &lt;span class="n"&gt;servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_servers&lt;/span&gt; &lt;span class="ss"&gt;:roles&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:app&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:except&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:no_release&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;run_locally&lt;/span&gt; &lt;span class="s2"&gt;"rsync -av ./public/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;assets_prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/ &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/public/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;assets_prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="n"&gt;run_locally&lt;/span&gt; &lt;span class="s2"&gt;"rm -rf public/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;assets_prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p class="panel callout radius"&gt;If you’re a Windows user you can obtain &lt;code&gt;rsync&lt;/code&gt; binaries &lt;a href="http://www.rsync.net/resources/howto/windows_rsync.html"&gt;here&lt;/a&gt;. 
Just add the &lt;code&gt;cwRsync/bin&lt;/code&gt; folder to your system path and everything will be peaches.&lt;/p&gt;

&lt;p&gt;To make sure assets are compiles we need to call &lt;code&gt;deploy:assets:precompile&lt;/code&gt; after each deployment. 
The order in which the task is called is no so critical here since Rails will be compiling assets from the local repository, but just in case anything else fails it would be best to call it after other tasks so we won’t have run a costly task for nothing.&lt;/p&gt;

&lt;p&gt;A good time to run the task is after &lt;code&gt;deploy:finalize_update&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="s2"&gt;"deploy:finalize_update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"deploy:assets:precompile"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
