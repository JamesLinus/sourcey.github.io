<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://sourcey.com</id>
  <link href="http://sourcey.com"/>
  <link href="http://sourcey.com/feed.xml" rel="self"/>
  <updated>2014-05-04T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>HTML5 Video Streaming from Google Drive</title>
    <link rel="alternate" href="http://sourcey.com/html5-video-streaming-from-google-drive/"/>
    <id>http://sourcey.com/html5-video-streaming-from-google-drive/</id>
    <published>2014-05-04T00:00:00Z</published>
    <updated>2014-05-05T00:23:49+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="html5-video-streaming-from-google-drive"&gt;HTML5 Video Streaming from Google Drive&lt;/h1&gt;

&lt;p&gt;If you made it here, then you're probably wondering if Google Drive is a viable option for hosting streamable videos? Well, the answer is yes!&lt;/p&gt;

&lt;p&gt;This is a follow-up to my last article, &lt;a href="/html5-video-is-finally-ready"&gt;HTML5 Video is Finally Ready&lt;/a&gt;, so read that first if you want the lowdown on how and why this works.&lt;/p&gt;

&lt;p&gt;In order to make files publicly playable by anyone you need to share the files as "Public on the web" via your Google Drive, otherwise standard OAuth rules apply.&lt;/p&gt;

&lt;p&gt;Here is the proof of concept which works on Chrome, Firefox and Safari:&lt;/p&gt;

&lt;div class="panel callout radius"&gt;
Please note that this page has received a LOT of traffic, so if the video isn't displaying then Drive may have temporarily restricted access to the file.
&lt;/div&gt;

&lt;video controls="controls" style="margin-bottom: 20px"&gt;
    &lt;source src="https://drive.google.com/uc?export=download&amp;amp;id=0B0JMGMGgxp9WMEdWb1hyQUhlOWs" type="video/mp4" /&gt;
    &lt;source src="https://drive.google.com/uc?export=download&amp;amp;id=0B0JMGMGgxp9WMEdWb1hyQUhlOWs" type="video/webm" /&gt;
&lt;/video&gt;

&lt;p&gt;And the source code:&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;controls=&lt;/span&gt;&lt;span class="s"&gt;"controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/uc?export=download&amp;amp;id=0B0JMGMGgxp9WMEdWb1hyQUhlOWs"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'video/mp4'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/uc?export=download&amp;amp;id=0B0JMGMGgxp9WMEdWb1hyQUhlOWs"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'video/webm'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;In order to be completely cross browser then we can't forget about the browser world's geriatric father; Internet Explorer. &lt;/p&gt;

&lt;p&gt;As you may already know, Google automatically encodes uploaded videos into lower bitrate FLV files for playback using Flash via the Google Drive Viewer, so your best bet is to access the raw FLV stream using a custom player of some kind. &lt;/p&gt;

&lt;p&gt;If you don't care about look of the player, then you can just reuse the Google Flash player like so:&lt;/p&gt;

&lt;object type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" data="https://video.google.com/get_player?el=leaf&amp;amp;cc_load_policy=1&amp;amp;enablejsapi=1" width="1280px" height="750px" id="vpl0" style="width: 590px; height: 370px; margin-bottom: 20px"&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;param name="allowscriptaccess" value="always" /&gt;&lt;param name="wmode" value="opaque" /&gt;&lt;param name="flashvars" value="status=ok&amp;amp;hl=en&amp;amp;allow_embed=0&amp;amp;ps=docs&amp;amp;partnerid=30&amp;amp;autoplay=0&amp;amp;docid=0B0JMGMGgxp9WMEdWb1hyQUhlOWs&amp;amp;abd=0&amp;amp;el=leaf&amp;amp;title=big_buck_bunny.mp4&amp;amp;iurl=https%3A%2F%2Fdocs.google.com%2Fvt%3Fauthuser%3D0%26id%3D0B0JMGMGgxp9WMEdWb1hyQUhlOWs&amp;amp;ttsurl=https%3A%2F%2Fdocs.google.com%2Ftimedtext%3Fauthuser%3D0%26id%3D0B0JMGMGgxp9WMEdWb1hyQUhlOWs%26vid%3De578958e6e16e44f&amp;amp;reportabuseurl=https%3A%2F%2Fdocs.google.com%2Fabuse%3Fauthuser%3D0%26id%3D0B0JMGMGgxp9WMEdWb1hyQUhlOWs&amp;amp;token=1&amp;amp;plid=V0QTaujn2CBLXA&amp;amp;fmt_stream_map=18%7Chttps%3A%2F%2Fr8---sn-ntq7ened.c.docs.google.com%2Fvideoplayback%3Frequiressl%3Dyes%26shardbypass%3Dyes%26cmbypass%3Dyes%26id%3De578958e6e16e44f%26itag%3D18%26source%3Dwebdrive%26app%3Ddocs%26ip%3D59.101.83.21%26ipbits%3D0%26expire%3D1399190315%26sparams%3Drequiressl%252Cshardbypass%252Ccmbypass%252Cid%252Citag%252Csource%252Cip%252Cipbits%252Cexpire%26signature%3D1409A45041079AC97B82A53C82B72B176E7295BE.432A8FD910D8DB7C14D0ED93884BE6D55B9C918%26key%3Dck2%26ir%3D1%26ms%3Dnxu%26mt%3D1399186650%26mv%3Dm%26mws%3Dyes%2C34%7Chttps%3A%2F%2Fr8---sn-ntq7ened.c.docs.google.com%2Fvideoplayback%3Frequiressl%3Dyes%26shardbypass%3Dyes%26cmbypass%3Dyes%26id%3De578958e6e16e44f%26itag%3D34%26source%3Dwebdrive%26app%3Ddocs%26ip%3D59.101.83.21%26ipbits%3D0%26expire%3D1399190315%26sparams%3Drequiressl%252Cshardbypass%252Ccmbypass%252Cid%252Citag%252Csource%252Cip%252Cipbits%252Cexpire%26signature%3D18B8078AAA0F03717ADE0B017E752D1E797B9406.81C1DA43B6417F6B524AA33F654E5BE0D90F596%26key%3Dck2%26ir%3D1%26ms%3Dnxu%26mt%3D1399186650%26mv%3Dm%26mws%3Dyes%2C43%7Chttps%3A%2F%2Fr8---sn-ntq7ened.c.docs.google.com%2Fvideoplayback%3Frequiressl%3Dyes%26shardbypass%3Dyes%26cmbypass%3Dyes%26id%3De578958e6e16e44f%26itag%3D43%26source%3Dwebdrive%26app%3Ddocs%26ip%3D59.101.83.21%26ipbits%3D0%26expire%3D1399190315%26sparams%3Drequiressl%252Cshardbypass%252Ccmbypass%252Cid%252Citag%252Csource%252Cip%252Cipbits%252Cexpire%26signature%3D41EDA4A85EB4BBD63C31C15D6A9178B48B99FC49.177799E1DBD96CB7575DB86EFB115BD10DFA37A1%26key%3Dck2%26ir%3D1%26ms%3Dnxu%26mt%3D1399186650%26mv%3Dm%26mws%3Dyes&amp;amp;fmt_list=18%2F640x360%2F9%2F0%2F115%2C34%2F640x360%2F9%2F0%2F115%2C43%2F640x360%2F99%2F0%2F0&amp;amp;url_encoded_fmt_stream_map=itag%3D18%26url%3Dhttps%253A%252F%252Fr8---sn-ntq7ened.c.docs.google.com%252Fvideoplayback%253Frequiressl%253Dyes%2526shardbypass%253Dyes%2526cmbypass%253Dyes%2526id%253De578958e6e16e44f%2526itag%253D18%2526source%253Dwebdrive%2526app%253Ddocs%2526ip%253D59.101.83.21%2526ipbits%253D0%2526expire%253D1399190315%2526sparams%253Drequiressl%252Cshardbypass%252Ccmbypass%252Cid%252Citag%252Csource%252Cip%252Cipbits%252Cexpire%2526signature%253D1409A45041079AC97B82A53C82B72B176E7295BE.432A8FD910D8DB7C14D0ED93884BE6D55B9C918%2526key%253Dck2%2526ir%253D1%2526ms%253Dnxu%2526mt%253D1399186650%2526mv%253Dm%2526mws%253Dyes%26type%3Dvideo%252Fmp4%253B%2Bcodecs%253D%2522avc1.42001E%252C%2Bmp4a.40.2%2522%26quality%3Dmedium%2Citag%3D34%26url%3Dhttps%253A%252F%252Fr8---sn-ntq7ened.c.docs.google.com%252Fvideoplayback%253Frequiressl%253Dyes%2526shardbypass%253Dyes%2526cmbypass%253Dyes%2526id%253De578958e6e16e44f%2526itag%253D34%2526source%253Dwebdrive%2526app%253Ddocs%2526ip%253D59.101.83.21%2526ipbits%253D0%2526expire%253D1399190315%2526sparams%253Drequiressl%252Cshardbypass%252Ccmbypass%252Cid%252Citag%252Csource%252Cip%252Cipbits%252Cexpire%2526signature%253D18B8078AAA0F03717ADE0B017E752D1E797B9406.81C1DA43B6417F6B524AA33F654E5BE0D90F596%2526key%253Dck2%2526ir%253D1%2526ms%253Dnxu%2526mt%253D1399186650%2526mv%253Dm%2526mws%253Dyes%26type%3Dvideo%252Fx-flv%26quality%3Dmedium%2Citag%3D43%26url%3Dhttps%253A%252F%252Fr8---sn-ntq7ened.c.docs.google.com%252Fvideoplayback%253Frequiressl%253Dyes%2526shardbypass%253Dyes%2526cmbypass%253Dyes%2526id%253De578958e6e16e44f%2526itag%253D43%2526source%253Dwebdrive%2526app%253Ddocs%2526ip%253D59.101.83.21%2526ipbits%253D0%2526expire%253D1399190315%2526sparams%253Drequiressl%252Cshardbypass%252Ccmbypass%252Cid%252Citag%252Csource%252Cip%252Cipbits%252Cexpire%2526signature%253D41EDA4A85EB4BBD63C31C15D6A9178B48B99FC49.177799E1DBD96CB7575DB86EFB115BD10DFA37A1%2526key%253Dck2%2526ir%253D1%2526ms%253Dnxu%2526mt%253D1399186650%2526mv%253Dm%2526mws%253Dyes%26type%3Dvideo%252Fwebm%26quality%3Dmedium&amp;amp;timestamp=1399186715856&amp;amp;length_seconds=61&amp;amp;playerapiid=vpl0" /&gt;&lt;/object&gt;

&lt;p&gt;Hopefully this will make someone's day like it made mine, cheers!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>HTML5 Video is Finally Ready</title>
    <link rel="alternate" href="http://sourcey.com/html5-video-is-finally-ready/"/>
    <id>http://sourcey.com/html5-video-is-finally-ready/</id>
    <published>2014-05-03T00:00:00Z</published>
    <updated>2014-05-05T00:38:36+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="html5-video-is-finally-ready"&gt;HTML5 Video is Finally Ready&lt;/h1&gt;

&lt;p&gt;Today I had a pleasant surprise when I was able to get a H.264 MPEG-4 AVC encoded MP4 video to play on Chrome (&lt;em&gt;34.0.1847.131&lt;/em&gt;), Firefox (&lt;em&gt;28.0&lt;/em&gt;) and Safari (&lt;em&gt;5.1.7&lt;/em&gt;) using the native HTML5 video element. Cross-browser HTML5 video (for the important browsers that is) is finally a go, keep on reading to find out how.&lt;/p&gt;

&lt;p&gt;As expected, Safari plays the video when source is provided with the &lt;code&gt;video/mp4&lt;/code&gt; mime type.
Here's the trick though, both Chrome and Firefox will play the &lt;strong&gt;same file&lt;/strong&gt; if it's provided with a &lt;code&gt;video/webm&lt;/code&gt; attribute. &lt;/p&gt;

&lt;p&gt;Here is the proof of concept. Try it out in Chrome, Firefox and Safari:&lt;/p&gt;

&lt;video controls="controls" style="margin-bottom:20px;width:640px"&gt;
    &lt;source src="http://media.sourcey.com/big_buck_bunny.mp4" type="video/mp4" /&gt;
    &lt;source src="http://media.sourcey.com/big_buck_bunny.mp4" type="video/webm" /&gt;
&lt;/video&gt;

&lt;p&gt;And the source code:&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;controls=&lt;/span&gt;&lt;span class="s"&gt;"controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://media.sourcey.com/big_buck_bunny.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'video/mp4'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://media.sourcey.com/big_buck_bunny.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'video/webm'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This is exactly what us developers wanted from HTML5 video since the beginning; a ubiquitous video format that works across all major browsers!
No more having to store multiple encodings of each damn video just to cater for different browser vendors and their ridiculous licensing strategies.
Well, now we have it, and it seems that H.264 has won the race. &lt;/p&gt;

&lt;p&gt;Unfortunately the prevailing video codec is about as patent encumbered as a NASA spaceship, 
which begs the next question; what's left for WebM? 
I'm still an advocate for WebM, mainly since I like to be able to encode videos without having to pay royalties to MPEG LA … I know, crazy right?
At this stage WebM's "openness" may be its only saving grace.&lt;/p&gt;

&lt;p&gt;I also had some luck getting this method to work with videos hosted Google Drive, the results including working examples from those tests are posted here: &lt;a href="/html5-video-streaming-from-google-drive"&gt;HTML5 Video Streaming from Google Drive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're able to test this on the new Internet Explorer I'd love to know if it works or not.
Drop me a comment if you're able to test it, or have any other thoughts to add.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Password Free Signup and Authentication</title>
    <link rel="alternate" href="http://sourcey.com/password-free-signup-and-authentication/"/>
    <id>http://sourcey.com/password-free-signup-and-authentication/</id>
    <published>2014-04-25T00:00:00Z</published>
    <updated>2014-04-25T23:36:27+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="password-free-signup-and-authentication"&gt;Password Free Signup and Authentication&lt;/h1&gt;

&lt;p&gt;Signup and authentication is a vital part of the user experience since it is probably the first interaction a customer has with your product or service. Let's face it, reentering your information each time you signup for a new service gets to be a real pain the the butt, so anything we can do to reduce the déjà vu is a good thing.&lt;/p&gt;

&lt;p&gt;Anyone who is dabbled with web services will be familiar with the &lt;a href="http://tools.ietf.org/html/rfc6749"&gt;OAuth&lt;/a&gt; specification. OAuth enables your customers to signup and login to your service with their existing third-party accounts such as Google, Facebook, Twitter etc. &lt;/p&gt;

&lt;p&gt;In fact, with a good OAuth implementation you can remove the need for passwords and even the entire signup process completely. The beauty here is that your customers don't have to remember any pesky passwords, and there's one less security concern for the developer.&lt;/p&gt;

&lt;h2 id="choosing-an-oauth-provider"&gt;Choosing an OAuth Provider&lt;/h2&gt;

&lt;p&gt;Choosing the right OAuth provider will come down to the nature of your product or service. Most big players in the industry provide OAuth APIs, so onless you are just looking for social login convenience, your decision will probably hinge on the other services offered by the provider.&lt;/p&gt;

&lt;h3 id="facebook"&gt;Facebook&lt;/h3&gt;

&lt;p&gt;The largest social network in the world is not surprisingly the &lt;a href="http://techcrunch.com/2013/04/08/report-46-of-social-login-users-still-choose-facebook-but-google-is-quickly-gaining-ground/"&gt;favourite OAuth provider&lt;/a&gt; for many users. Facebook has a very well rounded API and developer SDK. One of the more powerful features is the &lt;a href="https://developers.facebook.com/docs/reference/fql/"&gt;FQL&lt;/a&gt; language which enables you to query almost any social metadata on Facebook.&lt;/p&gt;

&lt;p&gt;One gotcha to be aware of when using the JavaScript SDK is the "channelUrl" parameter. Without it set the SDK is &lt;strong&gt;ridiculously&lt;/strong&gt; slow, so be sure that it points to a valid file on your server.&lt;/p&gt;

&lt;h3 id="google"&gt;Google&lt;/h3&gt;

&lt;p&gt;Probably the best IMO, especially for professional services. Google is a close second behind Facebook with regards to user adoption, and is ever increasing in popularity. Every professional on the Internet has a Google account, and there's a good chance they already use GMail and other Google services regularly. &lt;/p&gt;

&lt;p&gt;The real advantage of using Google however, is their &lt;a href="https://developers.google.com/products/"&gt;developer services&lt;/a&gt;. You can integrate your applications with Cloud Storage, Google Drive, YouTube, GMail and more, and it works seamlessly if your customers login with Google OAuth. &lt;/p&gt;

&lt;h3 id="twitter"&gt;Twitter&lt;/h3&gt;

&lt;p&gt;Twitter is good, but I would only recommend it when creating applications that integrate specifically with Twitter. The reason for this is that Twitter doesn't provide you with a valid user email address like the other providers do. As a developer this means implementing another step to get an email address from the user, which adds complexity and kind of defeats the purpose of using OAuth to begin with. &lt;/p&gt;

&lt;h3 id="linkedin"&gt;LinkedIn&lt;/h3&gt;

&lt;p&gt;The social network for professionals is good when building services for web professionals. LinkedIn traffic is considered to be higher quality and have &lt;a href="http://blog.hubspot.com/blog/tabid/6307/bid/30030/LinkedIn-277-More-Effective-for-Lead-Generation-Than-Facebook-Twitter-New-Data.aspx"&gt;higher conversions&lt;/a&gt; compared to other networks. Again it depends on your niche.&lt;/p&gt;

&lt;p&gt;Personally, I'm not a great fan of LinkedIn. I find their pushy business model and dated interface detract from the experience and drive me to interact elsewhere.&lt;/p&gt;

&lt;h2 id="going-all-the-way"&gt;Going All The Way&lt;/h2&gt;

&lt;p&gt;It's often tempting for developers to get carried away and build the entire kitchen sink, and once you've finished theres always more to do.
There is merit in &lt;a href="http://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful/"&gt;keeping things simple&lt;/a&gt;, which is why I subscribe to the belief that the best kind of code is code that you don't write yourself.&lt;/p&gt;

&lt;p&gt;If you have a niche product or service, you may consider restricting access to a single OAuth provider. While this method may ostracise certain customers, it will give you credibility and traction with the die-hards in your chosen network.&lt;/p&gt;

&lt;p&gt;For example, we are using Google authentication exclusively for our cloud video surveillance service, &lt;a href="https://anionu.com"&gt;Anionu&lt;/a&gt;. This means no passwords, and greater security for users, and access to their Google Drive for storing videos in the cloud. As well as the convenience of using familiar technology, Googlers have 15GB of free storage in their Google Drive which is a pretty solid incentive to signup. Nice!&lt;/p&gt;

&lt;h2 id="security-considerations"&gt;Security Considerations&lt;/h2&gt;

&lt;p&gt;Make sure you educate yourself on OAuth best practices before getting started. For all intents and purposes, the OAuth tokens you store are just like passwords, so the same cautions should be observed. Some implementation points to consider are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using CSRF validation to verify OAuth callbacks. Most providers allow you to specify extra parameters with your initial OAuth request. This should contain a CSRF token, and be verified on response.&lt;/li&gt;
  &lt;li&gt;Encrypt OAuth tokens in the database. You wouldn't store a clear text password now, would you?&lt;/li&gt;
  &lt;li&gt;Social network SDKs are notoriously slow, especially when using a few of them! Don't forget to cache the remote .js files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The obvious red flag for using OAuth is reliance on a third-party service, which we all want to keep to a minimum. The worst case scenario here is that the provider goes out of business; Google, not likely; Facebook, maybe given Zuckerberg's spending habits! As long as basic user information is retained locally there is no real risk to your business.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Users are becoming increasingly wary of who they share their information with, and with &lt;a href="http://gigaom.com/2013/12/31/snapchat-hacked-4-6-million-usernames-and-phone-numbers-lifted/"&gt;good reason&lt;/a&gt; too. This makes "password free signup" a great incentive to offer lazy and wary, security conscious, customers.&lt;/p&gt;

&lt;p&gt;It's an exciting technological era we live in, and as the big players claim more of the market share it's becoming more necessary for new and smaller startups to effectively use and integrate with the more established players in order to gain traction and build a solid customer base.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Guest Posting Opportunities</title>
    <link rel="alternate" href="http://sourcey.com/guest-posting-opportunities/"/>
    <id>http://sourcey.com/guest-posting-opportunities/</id>
    <published>2014-04-24T00:00:00Z</published>
    <updated>2014-04-25T23:39:25+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="guest-posting-opportunities"&gt;Guest Posting Opportunities&lt;/h1&gt;

&lt;p&gt;If you are promoting a brilliant open soruce project, or a new technology startup, then you may be interested in guest posting on Sourcey.com. Naturally only the highest quality original content will be considered.&lt;/p&gt;

&lt;p&gt;We work tirelessly to create quality code and startups ourselves, and as such we are intersted in hearing from other companies who are in the same boat.&lt;/p&gt;

&lt;p&gt;For guest posting opportunities and other forms of affiliation and collaboration please drop us a line on &lt;a href="&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#064;&amp;#115;&amp;#111;&amp;#117;&amp;#114;&amp;#099;&amp;#101;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;"&gt;&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#064;&amp;#115;&amp;#111;&amp;#117;&amp;#114;&amp;#099;&amp;#101;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Migrating from Wordpress to Middleman</title>
    <link rel="alternate" href="http://sourcey.com/migrating-from-wordpress-to-middleman/"/>
    <id>http://sourcey.com/migrating-from-wordpress-to-middleman/</id>
    <published>2014-04-04T10:09:32Z</published>
    <updated>2014-04-05T16:19:36+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="migrating-from-wordpress-to-middleman"&gt;Migrating from Wordpress to Middleman&lt;/h1&gt;

&lt;p&gt;Today I decided to take the plunge and convert Sourcey into a static website. Sourcey has been running on Wordpress for the better part of year now, and while Wordpress was the duck's nuts back then, today's static website generators just have so much to offer.&lt;/p&gt;

&lt;p&gt;Static websites are all the rage, and with good reason too. Unless your blog is huge, or you have the need for managed administration (wp dkz ntz), there is really no need for dynamic scripting languages, right? There's something satisfying and geekishly appealing about a static website; one less thing to break, and one less security vulnerability to worry about. Geeks love optimising stuff, and when it comes to building websites, you just don't get any more optimised than static HTML. &lt;/p&gt;

&lt;p&gt;The two main candidates for porting Sourcey to a static platform were &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; and &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. I have used both in the past, and both are built with Ruby (Jekyll has implementations in other languages too, such as a the &lt;code&gt;grunt-jekyll&lt;/code&gt; plugin), but due to my love affair with Rails and Sinatra I went with Middleman because of the similarities with Rails architecture, and it's superior flexibility.&lt;/p&gt;

&lt;p&gt;All in all it took around 10 hours work (including the learning curve), and I'm super glad I did it for a whole bunch of reasons. If you're interested in setting up or converting to a static website then keep on reading because I will be sharing some of the key points…&lt;/p&gt;

&lt;h2 id="installing-dependencies"&gt;Installing Dependencies&lt;/h2&gt;

&lt;p&gt;Go ahead and install the following dependencies:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ruby&lt;/li&gt;
  &lt;li&gt;git&lt;/li&gt;
  &lt;li&gt;middleman ($ &lt;code&gt;gem install middleman&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;bower ($ &lt;code&gt;npm install -g bower&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you haven't already, go and setup your Middleman application using &lt;a href="http://middlemanapp.com/basics/getting-started/"&gt;the official guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="installing-zurb-foundation-5"&gt;Installing Zurb Foundation 5&lt;/h2&gt;

&lt;p&gt;For the CSS framework I went with minimal installation of &lt;a href="http://foundation.zurb.com"&gt;Zurb Foundation 5&lt;/a&gt;. This is the first time I have used Foundation, and be honest a CSS framework is probably overkill, but the responsive elements and grids have proven very handy already. Anyway, since I've been using Bootstrap quite a bit lately I thought it might be nice to experiment with a new technology. &lt;/p&gt;

&lt;p&gt;Setting up Foundation to play nicely with Middleman is pretty straight forward, just follow the steps below. First add the below &lt;code&gt;bower.json&lt;/code&gt; and &lt;code&gt;.bowerrc&lt;/code&gt; files to your middleman folder.&lt;/p&gt;

&lt;h5 id="bowerjson"&gt;bower.json&lt;/h5&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"your-app-name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"foundation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"zurb/bower-foundation"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;h5 id="bowerrc"&gt;.bowerrc&lt;/h5&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"directory"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"source/bower_components"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Don't forget to expose bower's directory to the sprockets asset path by adding the following somewhere in your &lt;code&gt;config.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;after_configuration&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vi"&gt;@bower_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bowerrc"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;sprockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append_path&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@bower_config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"directory"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;OK, now run $ &lt;code&gt;bower install&lt;/code&gt; to install Foundation and friends.&lt;/p&gt;

&lt;p&gt;Foundation requires Modernizr and JQuery by default.
Now go ahead and create the following files:&lt;/p&gt;

&lt;h5 id="sourcejavascriptsmodernizrjs"&gt;source/javascripts/modernizr.js&lt;/h5&gt;

&lt;pre class="highlight plaintext"&gt;//= require modernizr/modernizr
&lt;/pre&gt;

&lt;h5 id="sourcejavascriptsappjs"&gt;source/javascripts/app.js&lt;/h5&gt;

&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;foundation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;h5 id="sourcejavascriptsalljs"&gt;source/javascripts/all.js&lt;/h5&gt;

&lt;pre class="highlight plaintext"&gt;//= require jquery/dist/jquery
//= require foundation/js/foundation.min

//= require app
&lt;/pre&gt;

&lt;p&gt;The next step is to setup our stylesheets.&lt;/p&gt;

&lt;p&gt;At this point it's a good idea to copy &lt;code&gt;source/bower_components/foundation/scss/foundation/_settings.scss&lt;/code&gt; to &lt;code&gt;source/stylesheets/_settings.scss&lt;/code&gt; so any changes you make the won't be overwritten. Feel free to modify it as needed.&lt;/p&gt;

&lt;h5 id="sourcestylesheetsappcssscss"&gt;source/stylesheets/app.css.scss&lt;/h5&gt;

&lt;pre class="highlight css"&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"foundation.scss"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Now to update our HTML layout file to work with Zurb and the changes we have made:&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"no-js"&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= data.page.title || "The Middleman" %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= stylesheet_link_tag "app" %&amp;gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= javascript_include_tag "modernizr" %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  
  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= page_classes %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= yield %&amp;gt;

    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= javascript_include_tag  "all" %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id="migrating-from-wordpress"&gt;Migrating from Wordpress&lt;/h2&gt;

&lt;p&gt;Migrating from Wordpress to Middleman wasn't too painful with the help of the &lt;code&gt;wp2middleman&lt;/code&gt; gem, which can be installed as follows:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;git clone http://github.com/mdb/wp2middleman
cd wp2middleman
bundle install
rake install
&lt;/pre&gt;

&lt;p&gt;If you haven't exported your Wordpress posts yet do so now as per &lt;a href="http://en.support.wordpress.com/export/"&gt;the official guide&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now to export your Wordpress XML file just use the &lt;code&gt;wp2mm&lt;/code&gt; command. &lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;wp2mm your_wordpress_export.xml
&lt;/pre&gt;

&lt;p&gt;Be sure to check out the Github page for export configuration options: https://github.com/mdb/wp2middleman&lt;/p&gt;

&lt;h2 id="deploying-on-gitbub-pages"&gt;Deploying on Gitbub Pages&lt;/h2&gt;

&lt;p&gt;The beauty of static hosting is its so easy, just whack it on a server and away you go! I love not having to worry about process monitoring and the like. Even better if someone else hosts the content right? Github pages is great for this since it's free and easy. &lt;/p&gt;

&lt;p&gt;If you haven't already created your git Github repository, do that now. If you're using User Pages the repository must be named like so: &lt;em&gt;username.github.io&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;I actually created two separate repositories; one for hosting the Middleman source site, and one for hosting the static Github pages. Most people just use a single repository with two branches, so why do I do it this way you ask? Mainly because I don't want my project repository to be reliant on the Github Pages work flow, &lt;strike&gt;just in case&lt;/strike&gt; when I need to switch for whatever reason down the track.&lt;/p&gt;

&lt;p&gt;Both repositories are on github, so go ahead and use them as a reference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sourcey/sourcey.com"&gt;https://github.com/sourcey/sourcey.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sourcey/sourcey.github.io"&gt;https://github.com/sourcey/sourcey.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To automate deployment I initially went with the &lt;code&gt;middleman-deploy&lt;/code&gt; gem since it seemed like the popular choice. For some reason it screwed up my site completely, and all my pages started returning 404. Since I wasn't in any mood for more debugging I decided to check the alternative &lt;code&gt;middleman-gh-pages&lt;/code&gt; gem, which as it turned out I also had problems of its own. This time I decided to get my hands dirty to fix some small issues, and ended up submitting &lt;a href="https://github.com/neo/middleman-gh-pages/pull/21"&gt;neo/middleman-gh-pages#21&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As it turned out I ended up ditching both gems, mainly because at the end of the day &lt;code&gt;middleman-gh-pages&lt;/code&gt; is designed for Github Project Pages, not User Pages. Incase you don't already know, GitHub offers two types of &lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;Pages&lt;/a&gt;; User Pages, and Project Pages. Each GitHub account can host a single User Page and an unlimited amount of Project Pages. Basically they are identical to the end-user and differ only in their configuration and the way it's accessed. User Pages are accessed via &lt;em&gt;username.github.io&lt;/em&gt; and exist in the &lt;code&gt;master&lt;/code&gt; branch, and Project Pages are accessed via &lt;em&gt;username.github.io/projectname&lt;/em&gt; and exist in the &lt;code&gt;gh-pages&lt;/code&gt; branch or the project repo.&lt;/p&gt;

&lt;p&gt;All I really need is a simple Rake task to automate building the static files locally, and deploying them to Github, so that's exactly what I went with. If you want to use my solution, then just add these two files to your application:&lt;/p&gt;

&lt;h5 id="rakefile"&gt;Rakefile&lt;/h5&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;'deploy.rake'&lt;/span&gt;
&lt;/pre&gt;

&lt;h5 id="deployrake"&gt;deploy.rake&lt;/h5&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"build static pages"&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:build&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"## Compiling static pages"&lt;/span&gt;
  &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"bundle exec middleman build"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"deploy to github pages"&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:deploy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"## Deploying to Github Pages"&lt;/span&gt;
  &lt;span class="n"&gt;cp_r&lt;/span&gt; &lt;span class="s2"&gt;".nojekyll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"build/.nojekyll"&lt;/span&gt;
  &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"build"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"git add ."&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"git add -u"&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Site updated at &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;utc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"## Commiting: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"git commit -m &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"## Pushing generated website"&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="s2"&gt;"git push origin master"&lt;/span&gt;
    &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s2"&gt;"## Github Pages deploy complete"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"build and deploy to github pages"&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:publish&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invoke&lt;/span&gt;
  &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"deploy"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invoke&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Now you can use the following commands to update your Github Pages:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;    &lt;span class="c1"&gt;# Compile all static files into the build directory&lt;/span&gt;
&lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;   &lt;span class="c1"&gt;# Deploy the build directory to Github Pages&lt;/span&gt;
&lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;  &lt;span class="c1"&gt;# Build and deploy in one command&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;To configure Github pages to point to your custom domain ie &lt;code&gt;example.com&lt;/code&gt;, follow the steps outlined in &lt;a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages"&gt;this guide&lt;/a&gt; to add a &lt;code&gt;CNAME&lt;/code&gt; file to your repository and setup DNS.&lt;/p&gt;

&lt;h2 id="static-website-bliss"&gt;Static Website Bliss&lt;/h2&gt;

&lt;p&gt;Hopefully there are some crazy web developers out there will find this post useful, and if you're like me and derive pleasure from the zen of simplification, then welcome to static website bliss! A big thanks to the wonderful devs behind the Middleman project, and if you have any questions or comments then just drop me a line ;)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Symple WebRTC Video Chat Demo</title>
    <link rel="alternate" href="http://sourcey.com/symple-webrtc-video-chat-demo/"/>
    <id>http://sourcey.com/symple-webrtc-video-chat-demo/</id>
    <published>2014-04-03T01:41:32Z</published>
    <updated>2014-04-06T22:29:10+10:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="symple-webrtc-video-chat-demo"&gt;Symple WebRTC Video Chat Demo&lt;/h1&gt;

&lt;p&gt;For those of you that don't know about Symple yet, it's a lightweight messaging and presence protocol for communication between our native and browser based apps. Most of our work with Symple until this point has been with WebRTC native to browser applications, so I thought it would be nice to create a demo which showcases just how easy it is to use Symple for building WebRTC video conferencing and real-time messaging applications.&lt;/p&gt;

&lt;p&gt;Symple's client side libraries already implement most of what we need to build such an application; real-time messaging; user presence; WebRTC signalling; and HTML5 video embedding. If fact, due to the comprehensiveness of Symple, and the awesomeness of AngularJS, I was able to write the entire application in less than 100 of JavaScript.&lt;/p&gt;

&lt;p&gt;Check out the live demo, and if you want to find what's happening under the hood then just keep on reading. If you're looking for the source, then you can find it on &lt;a href="https://github.com/sourcey/symple-client-webrtc-demo"&gt;Github&lt;/a&gt;. Enjoy!&lt;/p&gt;

&lt;center&gt;
&lt;a href="http://symple.sourcey.com" class="action-button button success radius" target="_blank"&gt;launch the demo&lt;/a&gt;
&lt;/center&gt;

&lt;h2 id="using-the-demo"&gt;Using the Demo&lt;/h2&gt;

&lt;p&gt;If you've used any sort of chat application before then this should be super easy for you! From the 'Login' panel just choose a handle/username to login. If you're testing then open another browser window and login again in order to have a conversation with yourself (I'm pretty sure it doesn't mean you're crazy).&lt;/p&gt;

&lt;p&gt;A full list of users will be displayed on the left hand sidebar when you have logged in. &lt;/p&gt;

&lt;h3 id="video-chat"&gt;Video Chat&lt;/h3&gt;

&lt;p&gt;This guide assumes you have two browser windows open, and you have logged in with both. We refer to the client making the call as the 'caller', and the person receiving the call as the 'callee'.&lt;/p&gt;

&lt;p&gt;Follow these steps to make a video call:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From the caller window, click open the 'Action' menu beside a handle in the sidebar and select 'Video chat'.&lt;/li&gt;
  &lt;li&gt;An 'Incoming call…' dialog will be displayed in the callee window. Go ahead and click 'Accept'.&lt;/li&gt;
  &lt;li&gt;Be sure to enable access the the video capture device in the caller window.&lt;/li&gt;
  &lt;li&gt;You should now be able to see your beautiful self in the caller window, and the callee should also be able to see the same video feed momentarily. &lt;/li&gt;
  &lt;li&gt;When video is flowing from the caller to the callee, the callee can hot the 'Start video' button to start sending video to the caller. Again be sure to enable browser access to the video capture device (as above).&lt;/li&gt;
  &lt;li&gt;WebRTC FTW!&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="panel callout radius"&gt;
Note that if you are attempting to make a call to a remote endpoint, and both users are behind a NAT or firewall, then the call will probably fail. In production you would use a TURN relay server which would facilitate a relayed connection between both endpoints, but that is beyond the scope of this demo.
&lt;/div&gt;

&lt;h3 id="instant-messaging"&gt;Instant Messaging&lt;/h3&gt;

&lt;p&gt;In order to broadcast messages to everyone who is online, just type something in the message from at the top of the 'Conversation' panel and hit 'Send'. If you want to send a direct message to a specific person, click the 'Action' menu beside their name and select 'Direct message'.&lt;/p&gt;

&lt;p&gt;You should see the user handle appears to the lest of the send message form, this means you are now sending direct messages to that user, and only they will see your messages. In order to stop sending direct messages, click the '@' beside the send message form and select 'Send to everyone' from the menu to remove the user scope.&lt;/p&gt;

&lt;h2 id="symple-and-webrtc"&gt;Symple and WebRTC&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.webrtc.org"&gt;WebRTC&lt;/a&gt; is the new standard for p2p video on the web, and although the spec has not yet reached full maturity, WebRTC already has full support in Firefox, Chrome and Opera. Support for Internet Explorer and Safari is still a way off due to the never ending &lt;a href="http://gigaom.com/2013/10/30/google-sticks-with-vp8-opposes-ciscos-push-for-h-264"&gt;h264 vs WebM debacle&lt;/a&gt;, but many forward thinking online enterprises are already adopting it as part of their core business model.&lt;/p&gt;

&lt;p&gt;WebRTC relies on the &lt;a href="https://tools.ietf.org/html/rfc5245"&gt;ICE (Interactive Connectivity Establishment)&lt;/a&gt; protocol to determine the best method for endpoints to establish connectivity and data flow, but the actually signalling functionality is left to the client. This is where Symple comes in. Symple is not only a great way of signalling SDP metadata between clients, but is also handles cross-browser HTML5 &lt;code&gt;video&lt;/code&gt; tag embedding which is necessary for WebRTC playback.&lt;/p&gt;

&lt;h2 id="open-source-repositories"&gt;Open Source Repositories&lt;/h2&gt;

&lt;p&gt;Symple and it's client/server implementations are open source, so feel free to grab them from Github and use them in your projects. For a full list of projects and the protocol specification see the Symple homepage: http://sourcey.com/symple &lt;/p&gt;

&lt;p&gt;I hope you enjoy the demo, and feel free to drop me a line if you have any questions.&lt;/p&gt;
</content>
  </entry>
</feed>
